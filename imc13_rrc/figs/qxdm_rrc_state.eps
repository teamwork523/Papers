%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Self-defined RRC state.pdf
%%Creator: Adobe Acrobat 10.1.3
%%For: haokun
%%CreationDate: 5/8/2013, 2:08:37 PM
%%BoundingBox: 0 0 836 188
%%HiResBoundingBox: 0 0 835.5000 187.5000
%%CropBox: 0 0 835.5000 187.5000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 951 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2013-05-08T14:08:11-04:00"
   xmp:CreatorTool="Microsoft® Visio® 2010"
   xmp:ModifyDate="2013-05-08T14:08:11-04:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Luo, Haokun</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -187.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 187.5 li
835.5 187.5 li
835.5 0 li
cp
clp
gsave
0 187.5 mo
836 187.5 li
836 -.5 li
0 -.5 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CALIBRI,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc12db27000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79664885e3d500007910000024dc68656164e606fe46000010480000
0036686865610d8d071e0000108000000024686d74788cc00cf6000010a4
000026326c6f6361c5e6bf66000036d800001e466d6178701bff16650000
5520000000206e616d658fc48c9b0000554000000e3470726570c7f0742e
000063740000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e10002ff4000acff00000009000000004d53202000200000
20130600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
000000059eb8f13f71505f0f3cf50019080000000000bbeb7ccc00000000
c5229872fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000003f7
040e0000000000000000000001cf000004d9001700000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000047c008d043c004f0000000000000000000000000000
0000000000000000000000000000000000000000000003e7008d00000000
000000000000000000000000000000000000000000000000000000000000
000003ac008d0000000000000000000000000000000000000000050c008d
00000000000000000222008d000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000362008d000000000000000000000000000000000000
000006fe008d0545008d0000000000000000000000000000000000000000
056900500000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000442008d0000000000000000
0481008d00000000000000000000000003c8003f00000000000000000000
0000000000000000000003f6000c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000468002104280010000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000331004900000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000000000000000000000000000000000000210001700000000
000000000223007d00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000273003b0000000003fcfff5
000000000000000000000000000000000000000000000000000000000000
000000000000027e006b027e006100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000040e003d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000040e0039
040e0094040e00580000000000000000040e00600000000000000000040e
003d040e0042000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000009e009e009e009e014d014d014d014d014d014d014d014d014d014d
014d014d014d01ef0282028202820282028202820282028202820282031b
031b031b031b031b031b031b031b031b031b03b203b203b203b203b203b2
045d045d045d049504950495049504950495049504950495049504950495
04950495049504e404e404e404e404e404e405a8065a065a065a065a065a
065a06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd074a074a
074a07fb07fb07fb07fb08b708b708b708b708b708b70916091609160916
091609160916091609160916091609160916091609160916091609160916
0916091609a30a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90b280b280b280b280bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0c490c490c490c490c490c490c490c490c490c490c490c7f
0c7f0c7f0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a
0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0cbf0cbf
0ce40ce40ce40ce40ce40ce40ce40ce40ce40ce40d2c0d740d740d740d74
0d740d740d740d740d740d740d740d740d740d740d740d740d740d740d74
0d740d740d740d740d740dc30dc30dc30dc30dc30dc30dc30dc30dc30dc3
0dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc3
0dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc3
0dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30eb80eb8
0eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb8
0eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb8
0f5a0ff810d610d610d6119f119f119f11a7126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e0000000100000f22004f00050048000300020010
002f006000000c63159c000100010000002d022200000003000000000064
00000000000300000001000e006400000003000000020008032a00000003
00000003003a030400000003000000040018031a00000003000000050018
033e000000030000000600180356000000030000000700fa036e00000003
00000008002a03e4000000030000000900200468000000030000000a02a0
0064000000030000000b00560488000000030000000c002a04de00000003
0000000d02980508000000030000000e006c07a000010000000000000032
080c00010000000000010007083e0001000000000002000409a100010000
00000003001d098e0001000000000004000c09990001000000000005000c
09ab0001000000000006000c09b70001000000000007007d09c300010000
00000008001509fe000100000000000900100a40000100000000000a0150
083e000100000000000b002b0a50000100000000000c00150a7b00010000
0000000d014c0a90000100000000000e00360bdc00030001040900000064
00000003000104090001000e006400030001040900020008032a00030001
04090003003a030400030001040900040018031a00030001040900050018
033e000300010409000600180356000300010409000700fa036e00030001
04090008002a03e4000300010409000900200468000300010409000a02a0
0064000300010409000b00560488000300010409000c002a04de00030001
0409000d02980508000300010409000e006c07a000a90020003200300030
00380020004d006900630072006f0073006f0066007400200043006f0072
0070006f0072006100740069006f006e002e00200041006c006c00200052
00690067006800740073002000520065007300650072007600650064002e
00430061006c0069006200720069002000690073002000610020006d006f
006400650072006e002000730061006e0073002000730065007200690066
002000660061006d0069006c007900200077006900740068002000730075
00620074006c006500200072006f0075006e00640069006e006700730020
006f006e0020007300740065006d007300200061006e006400200063006f
0072006e006500720073002e002000490074002000660065006100740075
0072006500730020007200650061006c0020006900740061006c00690063
0073002c00200073006d0061006c006c00200063006100700073002c0020
0061006e00640020006d0075006c007400690070006c00650020006e0075
006d006500720061006c00200073006500740073002e0020004900740073
002000700072006f0070006f007200740069006f006e007300200061006c
006c006f00770020006800690067006800200069006d0070006100630074
00200069006e002000740069006700680074006c00790020007300650074
0020006c0069006e006500730020006f0066002000620069006700200061
006e006400200073006d0061006c006c0020007400650078007400200061
006c0069006b0065002e002000430061006c006900620072006900270073
0020006d0061006e0079002000630075007200760065007300200061006e
006400200074006800650020006e00650077002000720061007300740065
007200690073006500720020007400650061006d00200075007000200069
006e0020006200690067006700650072002000730069007a006500730020
0074006f002000720065007600650061006c002000610020007700610072
006d00200061006e006400200073006f0066007400200063006800610072
00610063007400650072002e004d006900630072006f0073006f00660074
003a002000430061006c006900620072006900200042006f006c0064003a
0020003200300030003500560065007200730069006f006e00200035002e
0036003200430061006c0069006200720069002d0042006f006c00640043
0061006c0069006200720069002000690073002000650069007400680065
007200200061002000720065006700690073007400650072006500640020
00740072006100640065006d00610072006b0020006f0072002000610020
00740072006100640065006d00610072006b0020006f00660020004d0069
00630072006f0073006f0066007400200043006f00720070006f00720061
00740069006f006e00200069006e002000740068006500200055006e0069
007400650064002000530074006100740065007300200061006e0064002f
006f00720020006f007400680065007200200063006f0075006e00740072
006900650073002e004c0075006300280061007300290020006400650020
00470072006f006f00740068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f006300740066006f
006e007400730068007400740070003a002f002f0066006f006e00740066
0061006200720069006b002e0063006f006d0059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e0061007300700078a92032303038204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e4d6963726f736f66743a2043616c6962726920426f6c643a
203230303556657273696f6e20352e363243616c696272692d426f6c6443
616c69627269206973206569746865722061207265676973746572656420
74726164656d61726b206f7220612074726164656d61726b206f66204d69
63726f736f667420436f72706f726174696f6e20696e2074686520556e69
7465642053746174657320616e642f6f72206f7468657220636f756e7472
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078b10903b802f9b21e1d1f
b802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802
f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b2
1e2c1fb802efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c
1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb8
02e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3
b21e2c1fb802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d
2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191f
b802dab21d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802
d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b2
1d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d12
1fb802cdb21d121fb802ccb21d121fb802cbb21d121fb802cab21d191fb8
02c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5
b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d
2f1fb802c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d2f1f
b802bcb21d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802
b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b2
1d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c32
1fb802afb21c331fb802aeb21c331fb802adb21c331fb802acb21c331fb8
02abb21c331fb802aab21c311fb802a9b21c311fb802a8b21c321fb802a7
b21c321fb802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3b21c
321fb802a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c331f
b8029eb21c331fb8029db21c331fb8029cb21c311fb8029bb21c311fb802
9ab21c321fb80299b21c321fb80298b21c321fb80297b21c321fb80296b2
1c321fb80295b21c331fb80294b21c331fb80293b21c331fb80292b21c33
1fb80291b21c331fb80290b21c331fb8028fb21c331fb8028eb21c311fb8
028db21c321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb80289
b21c321fb80288b21c331fb80287b21c331fb80286b21c331fb80285b21c
331fb80284b21c331fb80283b21c331fb80282b21b341fb80281b21b341f
b80280b21b341fb8027fb21b341fb8027eb21b341fb8027db21b341fb802
7cb21b341fb8027bb21b341fb8027ab21b341fb80279b21b341fb80278b2
1b341fb80277b21b341fb80276b21b341fb80275b21b341fb80274b21b34
1fb80273b21b341fb80272b21b341fb80271b21b341fb80270b21b341fb8
026fb21a351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8026b
b21a351fb8026ab21a351fb80269b21a351fb80268b21a351fb80267b21a
351fb80266b21a351fb80265b21a351fb80264b21a351fb80263b21a351f
b80262b21a351fb80261b21a351fb80260b21a351fb8025fb21a351fb802
5eb21a351fb8025db21a351fb8025cb21a351fb8025bb21a351fb8025ab2
1a351fb80259b219371fb80258b219371fb80257b219371fb80256b21937
1fb80255b219371fb80254b219371fb80253b219371fb80252b219371fb8
0251b219371fb80250b219371fb8024fb219371fb8024eb219371fb8024d
b219371fb8024cb219371fb8024bb219371fb8024ab219371fb80249b219
371fb80248b219371fb80247b219371fb80246b219371fb80245b219371f
b80244b219371fb80243b219371fb80242b219371fb80241b219371fb802
40b219371fb8023fb219371fb8023eb219371fb8023db219371fb8023cb2
19371fb8023bb219371fb8023ab219371fb80239b218391fb80238b21839
1fb80237b218391fb80236b218391fb80235b218391fb80234b218391fb8
0233b218391fb80232b218391fb80231b218391fb80230b218391fb80301
b2182e1fb8022fb218391fb8022eb218391fb8022db218391fb8022cb218
391fb8022bb218391fb8022ab218391fb80229b218391fb80228b218391f
b80227b218391fb80226b218391fb80225b2173b1fb80224b2173b1fb802
23b217321fb80222b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2
173b1fb8021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b
1fb8021ab2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b1fb8
0216b2173b1fb80215b217321fb80214b2173a1fb80213b2173b1fb80212
b2173b1fb80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020eb217
3b1fb8020db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1f
b80209b217321fb80208b217321fb80207b2173b1fb80206b2173b1fb802
05b2173b1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb80201b2
173b1fb80200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b
1fb801fcb2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b1fb8
01f8b2173b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4
b2173b1fb801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0b217
3b1fb801efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1f
b801ebb2173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1fb801
e7b217321fb801e6b216231fb801e5b216231fb801e4b216371fb801e3b2
16371fb801e2b216381fb801e1b216381fb801e0b216431fb801dfb21644
1fb801deb216441fb801ddb216441fb801dcb216451fb801dbb216461fb8
01dab216461fb801d9b216461fb801d8b216231fb801d7b216231fb801d6
b216381fb801d5b216431fb801d4b216431fb801d3b216431fb801d2b216
441fb801d1b216461fb801d0b216461fb801cfb216461fb801ceb216461f
b801cdb216461fb801ccb216461fb801cbb216431fb801cab216231fb801
c9b216231fb801c8b216371fb801c7b216371fb801c6b216381fb801c5b2
16421fb801c4b216431fb801c3b216441fb801c2b216451fb801c1b21646
1fb801c0b216461fb801bfb216461fb801beb216461fb801bdb216461fb8
01bcb216461fb801bbb216461fb801bab216371fb801b9b216381fb801b8
b216421fb801b7b216431fb801b6b216431fb801b5b216431fb801b4b216
441fb801b3b216441fb801b2b216441fb801b1b216451fb801b0b216451f
b801afb216451fb801aeb216461fb801adb216461fb801acb216461fb801
abb216461fb801aab216461fb801a9b215341fb801a8b215411fb801a7b2
15411fb801a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b21552
1fb801a2b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8
019eb215521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8019a
b2154e1fb80199b2154e1fb80198b2154f1fb80197b2154f1fb80196b215
501fb80195b215521fb80194b215521fb80193b215521fb80192b215411f
b80191b2154f1fb80190b215501fb8018fb215501fb8018eb215511fb801
8db215521fb8018cb215521fb8018bb215521fb8018ab214581fb80189b2
14591fb80188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2145b
1fb80184b2145c1fb80183b214591fb80182b2145d1fb8018140af145d1f
f00f451fef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b
561fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b561f
aa0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b
561fa20b561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a681f
980a681f970a681f960a681f950a681f940a681f930a681f920a681f910a
681f9009681f8f09681f8e09681f8d09681f8c09681f410902fc02fa0056
001f02fb02fa0068001f017fb213321fb8017eb212371fb80174b212371f
b80173b211421fb80172b211421fb80171b211421fb80170b211421fb801
6fb211421fb8016eb211421fb8016db211421fb8016cb211421fb8016bb2
11421fb8016ab211421fb8013cb211421fb8013bb210421fb8013ab21042
1fb80139b210421fb80138b210421fb80137b210421fb80136b210421fb8
0135b210421fb80134b210421fb80133b210421fb80132b20f451fb80131
b20f451fb80130b20f451fb80112b20f451fb80111b20f451fb80110b20f
451fb8010fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e481f
b8010bb20e481fb8010ab20e481fb80109b20e481fb80108b20e481fb801
07b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea
0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e
1fd90b561fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba
0b561f9d0a681f9c0a681fb80180b213321fb8017ab211401fb80179b211
421fb80178b211421fb80177b211421fb80176b211421fb80175b211421f
b80143b211421fb80142b210421fb80141b210421fb80140b210421fb801
3fb210421fb8013eb210421fb8013db20f451fb80115b20f451fb80114b2
0f451fb80113b20f451fb903030302b2401fa4be030200b4030200c40302
00030300b213321fb8017bb213321fb80153b212371fb80152b211401fb8
0151b211401fb80150b211401fb8014fb211401fb8014eb211401fb8014d
b211401fb8014cb211401fb8014bb211401fb8014ab211401fb80149b211
401fb80148b211401fb80147b211401fb80146b211401fb80145b211401f
b80144b211401fb80122b211401fb80121b210421fb80120b210421fb801
1fb210421fb8011eb210421fb8011db210421fb8011cb210421fb8011bb2
10421fb8011ab210421fb80119b210421fb80118b20f451fb80117b20f45
1fb80116409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff8
0e481ff70e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a
1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd
0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e
1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb4
0b561fb30b561f9b0a681fb802fdb212371fb8017db212371fb8017cb212
371fb80169b2112e1fb80168b2112e1fb80167b211401fb80166b211401f
b80165b211401fb80164b211401fb80163b211401fb80162b211401fb801
61b211401fb80160b211401fb8015fb211401fb8015eb211401fb8015db2
11401fb8015cb211401fb8015bb211401fb8015ab211401fb80159b21140
1fb80158b211401fb80157b211401fb80156b211401fb80155b211401fb8
0154b211401fb8012fb211401fb8012eb210421fb8012db210421fb8012c
b210421fb8012bb210421fb8012ab210421fb80129b210421fb80128b210
421fb80127b210421fb80126b210421fb80125b20f451fb80124b20f451f
b80123b20f451fb80105b20f451fb80104b20f451fb80103b20f451fb801
02b20f451fb80101b20e481fb8010040a20e481fff0e481ffe0e481fe80c
4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1f
cf0c4e1fce0b561fb90b561f8503251f84032e1f83012e1f8248805581ab
80557f487d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d06
7c487a557bab7a55047a147a020a7948775578ab77550b77010c76487555
5475e475f4750314755475647574759475d475e47507a475b475c47503b8
ffc0401275383b46807590750214757475020075010fb8ffc04021750b0e
467448725573ab725504723472023bf47201e07201023072015072607202
b8ffc0b372242846b8ffc0403572161a461072307240720371486f5570ab
6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e48
6d55df6d0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef02fe
40ff016b032e1f6a03251f692e675568ab6755662e645565ab6455632e62
55612e60555f2e5d555eab5d555c2e5a555bab5a55592e58555703251f56
2e545555ab5455532e515552ab51554f2e4e554e03251f4d2e4b554cab4b
554a2e485549ab4855504801472e46554503361f001f01001e01001e701e
801ef01e040b601d701d02701de01df01d03701cf01c027f1b010f1a7f1a
8f1a030f1a8f1a020f1a8f1a020f191f198f199f19af19050f198f199f19
030c7012801202701180110230114011d011e011040011a011020f8f0f9f
0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e03
0f0eaf0ebf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d03
8f0d01400d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946ef0a
ff0a02400a242746ef09ff0902ff09010003012001010001100120010308
b8ffc0b301151f46b80100b316010501b80190b154532b2b4bb807ff524b
b008505bb00188b02553b00188b040515ab00688b000555a5b58b101018e
59b101024354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a0
1d594bb0805358b0401d594bb0ff5358b0001db1160042592b5e73757373
742b732b73742b2b73745e732b5e7374757374755e73747573015e737473
7475757473745e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b732b2b73755f75755e73
2b2b2b5e7373732b7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
5f5e00>
[9437 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 316 4 <00020017fffa04c305140022002600e1b10102435558b90024ffe8b40b0f
014c23b8ffe8401e0b0f014c250c0d23180d0016010e16260b0a23220a00
2004230111232625b8012a401e400b000c0112030c0c271d2423231e0a0d
160023221807121d521255055500183f3f3f1217393811331112392f5f5e
5d331a4ded3201192f5e5d1a18cd32337d87c4c40118c45e5d32337d87c4
c43130002b2b1bb90024ffe8b40b0f014c23b8ffe8b50b0f014c2625b801
2a401e400b000c0112030c0c271d2423231e0a0d160023221807121d5212
55055500183f3f3f1217393811331112392f5f5e5d331a4ded3231302b2b
59251616060623222e02270321070e03232226263637013e0333321e0217
0723032104b10c0616383133391e0c0457fe1a52040d1d352b2e3414060c
018f0610233e333b46271106c201b7016f62242a15050309100d0104fd0e
130b0406172a23047c11150b03030b1613c6fdda>PBAAAA+CALIBRI,Bold AddT42Char 
1 990 18 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>PBAAAA+CALIBRI,Bold AddT42Char 
1 1590 38 <0001008dfffa0363050e002700b9b10102435558b10713b8029440160d1d
001e1d07280f014d07180c0d014c07100b014d07ba01570013fff0b60b01
4d13131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb440225119
5500183f3f1a4ded2b2b12392f2bed2b2b2b012f2fc41139ed3231301b40
1107280f014d07180c0d014c07100b014d07ba01570013fff0b60b014d13
131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb4402251195500
183f3f1a4ded2b2b12392f2bed2b2b2b31305901140e0223211121321e02
15140e02232111140e0223222e02351134363321321e020363050b0e09fe
59018d090e0b05050b0e09fe730c1f322726331e0d2d210261090e0b0504
a21e29180cfea40a18281e1e281a0bfe1e0b100b06060b100b04952c270b
192a>PBAAAA+CALIBRI,Bold AddT42Char 
1 1892 44 <0001008dfffa047f0514002f00cfb10102435558b9002fffe0b30f014d25
b8ffe0b30f014d24b8ffe0b30f014d0bb8ffe0b30f014d0ab8ffe0b30f01
4d00b8ffe0b40f014d230cb80293b217240bb80293400b00172a5224180b
0f014c24bb01630040000cffe840140b0f014c0f0c1f0c020c030c0c121d
521255055500183f3f3f12392f5f5e5d2b1a4ded2b3f012fd4ed3210ed32
31302b2b2b2b2b2b1b40092a5224180b0f014c24bb01630040000cffe840
140b0f014c0f0c1f0c020c030c0c121d521255055500183f3f3f12392f5f
5e5d2b1a4ded2b3f31305925140e0223222e0235112111140e0223222e02
3511343e0233321e0215112111343e0233321e0215047f0d1e322627331d
0dfe1c0c1e322726331e0d0d1e332627321e0c01e40d1d332726321e0d24
0a100a06060a100a020bfdf50a100a06060a100a04c60a100a06060a100a
fe2501db0a100a06060a100a>PBAAAA+CALIBRI,Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>PBAAAA+CALIBRI,Bold AddT42Char 
PBAAAA+CALIBRI,Bold /CharStrings get begin
/A 4 def
/C 18 def
/F 38 def
/H 44 def
end
PBAAAA+CALIBRI,Bold /Encoding get
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 72 /H put
pop
end
%ADOEndSubsetFont
/XFUTXD+CALIBRI,Bold /PBAAAA+CALIBRI,Bold findfont ct_VMDictPut
/XFUTXD+CALIBRI,Bold*1 
[65{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F /.notdef /H 
183{/.notdef}rp]
XFUTXD+CALIBRI,Bold nf
XFUTXD+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
383.82 72.77 mo
(F)sh
394.836 72.77 mo
(A)sh
409.379 72.77 mo
(C)sh
422.082 72.77 mo
(H)sh
498.25 72.77 mo
(F)sh
509.266 72.77 mo
(A)sh
523.809 72.77 mo
(C)sh
536.511 72.77 mo
(H)sh
629.07 71 mo
(F)sh
640.086 71 mo
(A)sh
654.629 71 mo
(C)sh
667.331 71 mo
(H)sh
%ADOBeginSubsetFont: HIBBAA+CALIBRI,BoldItalic Initial
ct_T42Dict begin
-0.691 -0.305 1.262 0.965
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+CALIBRI,BoldItalic
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc12bb8e000000cc000000606376
742055d14f580000012c000006ac6670676da1ea42ac000007d800000913
676c7966303c225b00007bb400000ce468656164e4d8fe3a000010ec0000
0036686865610df70e050000112400000024686d74783338031300001148
000026026c6f6361491347ff0000374c00001ed26d6178701cf2179f0000
5620000000206e616d6532207d690000564000000e5b70726570c27c7a58
0000649c00001717676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
0304040a0204e10002ff4000acff00000009000000004d53202000210000
00720600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000700081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
00000000000000000000005f0060006e006f007000710062006700600072
0078007a007b007d007e007f0080008300850086008700890086008c008d
008e008f009100920093009400950096009700980099009a009b009c009d
009e009300960099009e0094009500000099009a00a000a200a600a800aa
00ac00ad00ae00a100a200a300a400a500a700a800a900aa00ab00a300a7
00a800aa00ab00ac00ad00ae009e00a300a600a700a900aa00ac00ad00af
00b000b100ac00ad00ae00af00b000b100b200b300b400b500af00af00b0
00b100b200b300b400b500b700b800b900b600b700b800b900ba00bb00bc
00bd00be00bf00c000c100c200c000c100c200b900ba00bb00bd00be00bf
00c000c100c200b600b700b800b900ba00bb00bc00bd00be00bf00c000c1
00c200cc00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf
00c400c500c600c700c800c900ca00cb00ce00cf00c400c500c600c700c8
00c900ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca
00cb00cc00cd00ce00cf00d000d100d200d300d400d500d600d800d900da
00db00de00df00e200e300e400ec00d000d100d400d500d600dc00dd00de
00e000e400e200e800d000d100d200d300d400d500d600d700d800d900da
00db00dc00dd00de00df00e000e100e200e300e400e600e700e800e900ed
00ee00d100d200d300d400d500d800d900da00dc00e100e800f600f700fb
0108011a011d010e011300f500f800fb010d011600f600fa0109010d0121
0127012d012e012f01340135013b014101420152012f0130006a006b0090
00910094009600980099009a009a009c0077007b008900940092009300a3
00a400a500a6008100a900ab00ac00ad00ae00af00b100b300b4009b00bb
00bb00bb00bf00bc00bd00c200c300c400c500c600c700c800c900ca00cb
00cd00d000a800ac00b100b400b500b600b700b800b900ba00bb00bc00bd
00be00c200c400c500c600c800b400ca000000b400b500b600b700b800b9
00be00bf00c300c600c700c800c900ca00cb00cf00d000aa00ad00ae00b1
00b200ba00be00c000c500c600c800c900cf00d000d100d200d5000000d4
00d900da00db00dc00dd00de00e200e500d100d300d400d100d200d800da
00db00cb00de00df00df00e100e200e400e500e600d600d700d100d300d3
00d400d500d700ce00d600db00dc00dd00de00c400bb00e100d200d200e0
00d200d100d300d500d600d900d600d600db00c900dc00ac00e100de00de
00df00e000e800eb00ed00e800e900ea00e000e700ed00bc00e300ea00e5
00ba00e700e800e300e800e900ea00cc00ed00f000f200f400ee00ef00f1
00f200f300f400f400f400c100ee00f200ee00ee00f100ef00db00f300db
00ee00ef00eb00d700f000dd00ec00f500f200f700f700f300f900f500f6
00fc00fc00f400d900fa00fb00fc00f700f700da00f900f600fa00fb00fb
00ff00fe00ff010001010102010300f900ff0100010000fc00fc00fc00e2
00fd00e900fe00fa00fe010100fd010301040106010701080109010a010b
010c010d0100010101070108010900ff0100010100fa01020104010b010c
010800ff010001060107010800f8010a010b010c010d010f011001110112
011301140115011600fd010e010f01120118010f01100111010901130114
0115011601170118010e010f011001110112011301150000011701180119
011a0000011e0120012100ce011c011e00f6011a011c011d012001220119
0102011d000000d5012301270128012901300133013500000124012500fd
012e012f013e013f012300000125012601270000012b00fe012f0130013c
013e014101440145012300ff012c0136013b013e01460000000000000000
00000000000000000000000002990092000000000000042600d8050e0105
03c000c2024e0078042600d700b100a000500058005e006a05e802cc4046
5f5e5d5c5b5a59585554535251504f4e4d4c4b4a49484746454443424140
3f3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a
090807060504030201002c4523466020b02660b004262348482d2c452346
236120b02661b004262348482d2c45234660b0206120b04660b004262348
482d2c4523462361b0206020b02661b02061b004262348482d2c45234660
b0406120b06660b004262348482d2c4523462361b0406020b02661b04061
b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a5158
2320b08d44235920b0ed51582320b04d44235920b0042651582320b00d44
235921212d2c20204518684420b001602045b04676688a4560442d2c01b1
0b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0
282370b10228453ab10200080d2d2c2045b00325456164b050515845441b
2121592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061
b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03
458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d
2c4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c00b00743b00643
0b2d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2c4523456023456023
456023766818b08062202d2cb00426b00426b00425b0042545234520b003
266062636820b0032661658a2344442d2c2045b0005458b040442045b040
61441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f23
70b01423421b2121592d2c4b515820b0032545695358441b2121591b2121
592d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a60
442d2c45234560442d2c4b235158b90033ffe0b134201bb3330034005944
442d2cb0164358b00326458a586466b01f601b64b020606620581b21b040
59b001615923586559b02923442310b029e01b2121212121592d2cb01643
58b004254564b020606620581b21b04059b0016123586559b0292344b004
25b00725082058021b0359b0052510b004252046b0042523423cb0072510
b006252046b00425b0016023423c2058011b0059b0052510b00425b029e0
b0072510b00625b029e0b00425b00725082058021b0359b00425b0032543
48b00625b00325b0016043481b2159212121212121212d2cb0164358b004
254564b020606620581b21b04059b0016123581b6559b0292344b00525b0
0825082058021b0359b0042510b005252046b0042523423cb00425b00725
08b0072510b006252046b00425b0016023423c2058011b0059b0042510b0
0525b029e0b02920456544b0072510b00625b029e0b00525b00825082058
021b0359b00525b003254348b00425b0072508b00625b00325b001604348
1b2159212121212121212d2c02b00425202046b004252342b0052508b003
254548212121212d2c02b0032520b0042508b0022543482121212d2c4523
20451820b00050205823652359236820b040505821b04059235865598a60
442d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b
2121592d2c4b53234b515a58381b2121592d2cb000214b5458381b212159
2d2cb002435458b0462b1b21212121592d2cb002435458b0472b1b212121
592d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b2121
21592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325
b0062649618b3812342d2c014623466023466123201020468a61b8ff8062
8ab140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b5258
7d1b7a592d2cb012004b014b54422d2cb1020042b123018851b140018853
5a58b910000020885458b202010243604259b12401885158b92000004088
5458b2020202436042b12401885458b2022002436042004b014b5258b202
0802436042591bb940000080885458b202040243604259b94000008063b8
0100885458b202080243604259b94000010063b80200885458b202100243
604259b94000020063b80400885458b202400243604259595959592d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d000001000000059eb8d345beb25f0f3cf50019
080000000000bbeb7ccc00000000c522986ffa78fd8d0a1e07bc00030009
0002000000000000000100000600fe0001c40aa0fa78f9cc0a1e0800019a
0000000000000000000000000399040e0000000000000000000000000000
04d9ffc00000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000004260060
0000000000000000000000000000000000000000050b003b000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000003ac003500000000000000000000
00000000000000000000050c003400000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000006fe003400000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000004420034000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000439003e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000002d10026000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000029b009b00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
038200e80000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000a8
00a800a800a8014301430143014301430143014301430143014301430143
0143014301c301c301c301c301c301c30231023102310231023102310231
023102310231023102310231023102ac02ac02ac02ac02ac02ac03540354
035403540354035403540354035403540354035403540354035403540354
035403540354035403540354035403fe03fe03fe03fe03fe03fe03fe03fe
03fe03fe03fe03fe03fe03fe03fe03fe03fe03fe03fe0487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
048704870487048704870487048704870487048704870487048704870487
04870487048704870487048704870487048704870487052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a052a052a052a052a052a052a052a052a052a052a
052a052a052a052a052a05b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b106160616061606160616061606160616061606160616061606160616
061606160616061606160616061606160616061606160616061606160616
061606160616061606160616061606160616061606160616061606160616
061606160616061606160616061606160616061606160616061606160616
061606160616061606160616061606160616061606160616061606160616
061606160616067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067206720672
067206720672067206720672067206720672067206720672067200000001
00000f68005700050000000000020010002f006000000d14171700000000
0000002d02220000000300000000006400000000000300000001000e0064
00000003000000020016032a000000030000000300480304000000030000
00040026031a00000003000000050018034c000000030000000600240364
000000030000000700fa03880000000300000008002a03fe000000030000
000900200482000000030000000a02a00064000000030000000b005604a2
000000030000000c002a04f8000000030000000d02980522000000030000
000e006c07ba000100000000000000320826000100000000000100070858
0001000000000002000b09bb0001000000000003002409a8000100000000
0004001309b30001000000000005000c09cc0001000000000006001209d8
0001000000000007007d09ea000100000000000800150a25000100000000
000900100a67000100000000000a01500858000100000000000b002b0a77
000100000000000c00150aa2000100000000000d014c0ab7000100000000
000e00360c030003000104090000006400000003000104090001000e0064
00030001040900020016032a000300010409000300480304000300010409
00040026031a00030001040900050018034c000300010409000600240364
000300010409000700fa03880003000104090008002a03fe000300010409
000900200482000300010409000a02a00064000300010409000b005604a2
000300010409000c002a04f8000300010409000d02980522000300010409
000e006c07ba00a9002000320030003000380020004d006900630072006f
0073006f0066007400200043006f00720070006f0072006100740069006f
006e002e00200041006c006c002000520069006700680074007300200052
0065007300650072007600650064002e00430061006c0069006200720069
002000690073002000610020006d006f006400650072006e002000730061
006e0073002000730065007200690066002000660061006d0069006c0079
0020007700690074006800200073007500620074006c006500200072006f
0075006e00640069006e006700730020006f006e0020007300740065006d
007300200061006e006400200063006f0072006e006500720073002e0020
004900740020006600650061007400750072006500730020007200650061
006c0020006900740061006c006900630073002c00200073006d0061006c
006c00200063006100700073002c00200061006e00640020006d0075006c
007400690070006c00650020006e0075006d006500720061006c00200073
006500740073002e0020004900740073002000700072006f0070006f0072
00740069006f006e007300200061006c006c006f00770020006800690067
006800200069006d007000610063007400200069006e0020007400690067
00680074006c007900200073006500740020006c0069006e006500730020
006f0066002000620069006700200061006e006400200073006d0061006c
006c0020007400650078007400200061006c0069006b0065002e00200043
0061006c0069006200720069002700730020006d0061006e007900200063
0075007200760065007300200061006e006400200074006800650020006e
006500770020007200610073007400650072006900730065007200200074
00650061006d00200075007000200069006e002000620069006700670065
0072002000730069007a0065007300200074006f00200072006500760065
0061006c002000610020007700610072006d00200061006e006400200073
006f006600740020006300680061007200610063007400650072002e004d
006900630072006f0073006f00660074003a002000430061006c00690062
0072006900200042006f006c00640020004900740061006c00690063003a
0020003200300030003500560065007200730069006f006e00200035002e
0036003200430061006c0069006200720069002d0042006f006c00640049
00740061006c0069006300430061006c0069006200720069002000690073
002000650069007400680065007200200061002000720065006700690073
00740065007200650064002000740072006100640065006d00610072006b
0020006f007200200061002000740072006100640065006d00610072006b
0020006f00660020004d006900630072006f0073006f0066007400200043
006f00720070006f0072006100740069006f006e00200069006e00200074
0068006500200055006e0069007400650064002000530074006100740065
007300200061006e0064002f006f00720020006f00740068006500720020
0063006f0075006e00740072006900650073002e004c0075006300280061
00730029002000640065002000470072006f006f00740068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f006300740066006f006e007400730068007400740070003a002f
002f0066006f006e007400660061006200720069006b002e0063006f006d
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e00740020006100730020007000650072006d0069
00740074006500640020006200790020007400680065002000450055004c
004100200066006f00720020007400680065002000700072006f00640075
0063007400200069006e0020007700680069006300680020007400680069
007300200066006f006e007400200069007300200069006e0063006c0075
00640065006400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e0074002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e00740073002f0064
0065006600610075006c0074002e0061007300700078a92032303038204d
6963726f736f667420436f72706f726174696f6e2e20416c6c2052696768
74732052657365727665642e43616c696272692069732061206d6f646572
6e2073616e732073657269662066616d696c79207769746820737562746c
6520726f756e64696e6773206f6e207374656d7320616e6420636f726e65
72732e204974206665617475726573207265616c206974616c6963732c20
736d616c6c20636170732c20616e64206d756c7469706c65206e756d6572
616c20736574732e204974732070726f706f7274696f6e7320616c6c6f77
206869676820696d7061637420696e2074696768746c7920736574206c69
6e6573206f662062696720616e6420736d616c6c207465787420616c696b
652e2043616c696272692773206d616e792063757276657320616e642074
6865206e65772072617374657269736572207465616d20757020696e2062
69676765722073697a657320746f2072657665616c2061207761726d2061
6e6420736f6674206368617261637465722e4d6963726f736f66743a2043
616c6962726920426f6c64204974616c69633a203230303556657273696f
6e20352e363243616c696272692d426f6c644974616c696343616c696272
692069732065697468657220612072656769737465726564207472616465
6d61726b206f7220612074726164656d61726b206f66204d6963726f736f
667420436f72706f726174696f6e20696e2074686520556e697465642053
746174657320616e642f6f72206f7468657220636f756e74726965732e4c
7563286173292064652047726f6f74687474703a2f2f7777772e6d696372
6f736f66742e636f6d2f7479706f6772617068792f6374666f6e74736874
74703a2f2f666f6e7466616272696b2e636f6d596f75206d617920757365
207468697320666f6e74206173207065726d697474656420627920746865
2045554c4120666f72207468652070726f6475637420696e207768696368
207468697320666f6e7420697320696e636c7564656420746f2064697370
6c617920616e64207072696e7420636f6e74656e742e20596f75206d6179
206f6e6c792028692920656d626564207468697320666f6e7420696e2063
6f6e74656e74206173207065726d69747465642062792074686520656d62
656464696e67207265737472696374696f6e7320696e636c756465642069
6e207468697320666f6e743b20616e6420286969292074656d706f726172
696c7920646f776e6c6f6164207468697320666f6e7420746f2061207072
696e746572206f72206f74686572206f7574707574206465766963652074
6f2068656c70207072696e7420636f6e74656e742e687474703a2f2f7777
772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f6e
74732f64656661756c742e6173707800b10903b802a3b21b341fb8029bb2
1a351fb8028eb21a351fb80272b219371fb80271b219371fb80270b21937
1fb8025cb218391fb8025bb218391fb8025ab218391fb80223b2173b1fb8
0222b2173b1fb80221b2173b1fb80220b2173b1fb8021fb2173b1fb8021e
b2173b1fb8021db2173b1fb8021cb2173b1fb80219b2173b1fb8021bb217
3b1fb80218b2173b1fb80217b216461fb801e1b216461fb801e0b216461f
b801dfb216461fb801deb216461fb801ddb216461fb801dcb216461fb801
dbb216461fb801dab216461fb801d9b216461fb801d8b216461fb801d7b2
16461fb801d6b216461fb801d3b216461fb801d5b216461fb801d4b21646
1fb801d2b216461fb801d1b216461fb801d0b216461fb801ceb216461fb8
01cdb216461fb801ccb216461fb801cbb216461fb801cab216461fb801c9
b216461fb801c8b216461fb801c7b216461fb801c6b216461fb801c4b216
461fb801c3b216461fb801c2b216461fb801c1b216461fb801bab215461f
b801cfb215551fb801b9b215551fb801b8b215551fb801b7b215551fb801
b6b215641fb801b5b215641fb801b4b215641fb801b3b215641fb801b2b2
15641fb801c5b215641fb80334b21f2d1fb80333b21f2d1fb80332b21f2d
1fb80331b21f2d1fb80330b21f2d1fb8032fb21b341fb8032eb21f2d1fb8
030db21e2f1fb8030bb21e2f1fb802fbb21d301fb802fab21d301fb802f8
b21d301fb802f7b21d301fb802f6b21d301fb802f5b21d301fb802f4b21d
301fb802f3b21d301fb802f2b21d301fb802dab21c331fb802d9b21c331f
b802d8b21c331fb802d7b21c331fb802d5b21c331fb802d4b21c331fb802
d3b21c331fb802b9b21b341fb8030cb21b341fb802b7b21b341fb802d2b2
1b341fb802d1b21b341fb802b6b21b341fb802b4b21b341fb802b8b21a35
1fb802a2b21a351fb802a1b21a351fb802a0b21a351fb802b5b21a351fb8
029eb21a351fb802d6b21a351fb8029cb21a351fb8029fb219371fb8028c
b219371fb8028db219371fb80289b2173b1fb80286b219371fb80285b219
371fb8026fb218391fb8028bb218391fb80287b218391fb8026db218391f
b8026cb218391fb8026bb218391fb8026ab2173b1fb80255b2173b1fb802
59b2173b1fb80258b2173b1fb80257b2173b1fb80256b2173b1fb8028ab2
173b1fb80253b2173b1fb80251b2173b1fb8029db2173b1fb8024eb2173b
1fb80288b2173b1fb80250b2173b1fb8024fb2173b1fb8024db2173b1fb8
024cb2173b1fb8030fb2173b1fb8024ab2173b1fb8024bb2173b1fb80216
b216461fb80215b216461fb8026eb216461fb80252b216461fb80214b216
461fb80213b216461fb80212b216461fb80211b216461fb80210b216461f
b8020fb216461fb8020eb216461fb8020db216461fb8020cb216461fb802
0bb216461fb8020ab216461fb80254b216461fb80209b216461fb801c0b2
15641fb801bfb215641fb8031eb21f2d1fb8031db21f2d1fb8031cb21f2d
1fb8031bb21f2d1fb80319b21f2d1fb80318b21f2d1fb80304b21e2f1fb8
0303b21e2f1fb802e7b21d301fb802e6b21d301fb802e5b21d301fb802e4
b21d301fb802c7b21c331fb802c6b21c331fb802c5b21c331fb802c4b21b
341fb802c3b21b341fb802adb21b341fb802acb21b341fb802abb21b341f
b8031ab21a351fb80236b2173b1fb80235b2173b1fb80263b216461fb803
16b21f2d1fb80315b21f2d1fb80314b21f2d1fb80313b21f2d1fb80312b2
1f2d1fb80311b21f2d1fb80310b21f2d1fb80301b21e2f1fb80300b21e2f
1fb802ffb21e2f1fb802fdb21e2f1fb802fcb21e2f1fb802e2b21d301fb8
02e1b21d301fb802e0b21d301fb802dfb21d301fb802deb21d301fb802dd
b21d301fb802dcb21d301fb802dbb21d301fb802c2b21c331fb802c1b21c
331fb802c0b21c331fb802bfb21c331fb802beb21c331fb802bdb21c331f
b802bcb21c331fb802bbb21c331fb802bab21c331fb802a9b21b341fb802
a8b21b341fb802a7b21b341fb802a6b21b341fb802a5b21b341fb802a4b2
1b341fb802e3b21a351fb80295b21a351fb80294b21a351fb80291b21a35
1fb8028fb21a351fb80293b219371fb80292b219371fb8027ab219371fb8
0279b219371fb80278b219371fb80277b219371fb80290b219371fb80276
b219371fb80275b219371fb80274b219371fb80273b219371fb80262b218
391fb8025fb218391fb8025eb218391fb8025db218391fb80261b218391f
b80234b2173b1fb80233b2173b1fb80232b2173b1fb80231b2173b1fb802
30b2173b1fb80260b2173b1fb8022fb2173b1fb8022eb2173b1fb8022db2
173b1fb8022bb2173b1fb8022ab2173b1fb80229b2173b1fb80226b2173b
1fb80225b2173b1fb80224b2173b1fb80228b2173b1fb80227b2173b1fb8
0302b216461fb8022cb216461fb801f6b216461fb801f4b216461fb801f3
b216461fb801f2b216461fb801f1b216461fb801f0b216461fb801efb216
461fb801eeb216461fb801edb216461fb801ecb216461fb801ebb216461f
b801eab216461fb801e9b216461fb801e8b216461fb801e7b216461fb801
e6b216461fb801e5b216461fb801f5b216461fb801e4b216461fb801e3b2
16461fb801e2b216461fb8032db21f2d1fb8032cb21f2d1fb8032bb21f2d
1fb8032ab21f2d1fb80329b21f2d1fb80328b21f2d1fb80327b21f2d1fb8
0325b21f2d1fb80323b21f2d1fb80322b21f2d1fb80321b21f2d1fb8031f
b21f2d1fb8030ab21e2f1fb80309b21e2f1fb80308b21e2f1fb80307b21e
2f1fb80306b21e2f1fb802f1b21d301fb802f0b21d301fb802efb21d301f
b802eeb21d301fb802edb21d301fb802ecb21d301fb802eab21d301fb802
e9b21d301fb802e8b21d301fb802cfb21c331fb802ceb21c331fb802ebb2
1c331fb802d0b21c331fb802cdb21c331fb802ccb21b341fb802cab21b34
1fb802c9b21b341fb802c8b21b341fb80326b21b341fb802b2b21a351fb8
02b0b21a351fb802afb21a351fb802aeb21a351fb8029ab21a351fb80299
b21a351fb80298b21a351fb802cbb21a351fb802aab21a351fb80305b219
371fb80296b219371fb80283b219371fb80280b219371fb80281b219371f
b8027fb219371fb8027eb219371fb80265b218391fb802b3b218391fb802
69b218391fb80268b2173b1fb80266b2173b1fb80264b2173b1fb802b1b2
173b1fb80245b2173b1fb80248b2173b1fb80242b2173b1fb80241b2173b
1fb80240b2173b1fb8023fb2173b1fb80284b2173b1fb80282b2173b1fb8
0297b2173b1fb8023cb2173b1fb8023eb2173b1fb8023bb2173b1fb8023a
b2173b1fb80239b2173b1fb80249b2173b1fb80247b2173b1fb80246b217
3b1fb80238b2173b1fb80237b2173b1fb80208b216461fb80207b216461f
b8023db216461fb80206b216461fb80205b216461fb80204b216461fb802
03b216461fb80202b216461fb80201b216461fb80244b216461fb80243b2
16461fb80200b216461fb8027bb216461fb801ffb216461fb801feb21646
1fb80267b216461fb801fdb216461fb801fcb216461fb801fbb216461fb8
01fab216461fb801f9b216461fb801f8b216461fb801beb215641fb801bd
b215641fb801bcb215641fb801bbb215641fb801b1b2148b1fb801b0b214
8b1fb8027db219371fb8027cb219371fb8011e40c710421ff70e481ff60e
481ff50d4a1fe20d4a1fe10d4a1fe00c4e1fc50c4e1fc40c4e1fc30c4e1f
c20c4e1fc10c4e1fc00c4e1fbf0b561fbe0b561fb40b561fb30b561fb20b
561fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b561f
aa0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b
561fa10a681fa00a681f9f0a681f9e0a681f9d0a681f9c0a681f9b0a681f
9a0a681f990a681f980a681f970a681f960a681f9509771f9109771f9009
771f8f09771f8e09771fb903530350400a561f8d09771f8c09651f410903
5203500068001f035103500068001f01a2b213321fb801a1b213321fb801
a0b212371fb8019fb212371fb80191b212371fb80190b211401fb8018fb2
11401fb8018eb211401fb8018db211401fb8018cb211401fb8018bb21140
1fb8018ab211401fb80189b211401fb80188b211401fb80187b211401fb8
014eb211401fb8014db210421fb8014cb210421fb8014bb210421fb8014a
b210421fb80149b210421fb80148b210421fb80147b210421fb80146b210
421fb80145b210421fb80144b20f451fb80143b20f451fb80142b20f451f
b8011db20f451fb8011cb20f451fb8011bb20f451fb8011ab20f451fb801
19b20f451fb80118b20e481fb80117b20e481fb80116b20e481fb80115b2
0e481fb80114b20e481fb80113b20e481fb80112b20d4a1fb8011140570d
4a1ff40d4a1ff30d4a1ff20d4a1ff10d4a1ff00d4a1fef0d4a1fee0c4e1f
df0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b
561fbd0b561fbc0b561fba0b561fb90b561fa20a681f9409771fb80199b2
13321fb80198b213321fb80169b211401fb80168b211401fb80167b21140
1fb80166b211401fb80165b211401fb80164b211401fb80163b211401fb8
0162b211401fb80161b211401fb80160b211401fb80135b211401fb80134
b210421fb80133b210421fb80132b210421fb80131b210421fb80130b210
421fb8012fb210421fb8012eb210421fb8012db20f451fb8012cb20f451f
b80107b20f451fb80106b20f451fb80105b20f451fb9034f034eb23b1f34
bf034e0044034e0054034e0003ffc0034eb2292c46b9ffc0034eb2121646
b801adb213141fb801acb2131b1fb801abb2131b1fb801aab213231fb801
a9b213231fb801a8b213231fb801a7b213321fb801a6b213321fb801a5b2
13321fb801a4b213321fb801a3b213321fb80197b213321fb80196b21332
1fb80195b213321fb80194b212371fb80193b212371fb80192b212371fb8
015fb212371fb8015eb211401fb8015db211401fb8015cb211401fb8015b
b211401fb8015ab211401fb80159b211401fb80158b211401fb80157b211
401fb80156b211401fb80155b211401fb80154b211401fb80153b211401f
b80152b211401fb80151b211401fb80150b211401fb8014fb211401fb801
2bb211401fb8012ab210421fb80129b210421fb80128b210421fb80127b2
10421fb80126b210421fb80125b210421fb80124b210421fb80123b21042
1fb80122b210421fb80121b20f451fb80120b20f451fb8011fb20f451fb8
0104b20f451fb80103b20f451fb80102b20f451fb80101b20f451fb80100
40830e481fff0e481ffe0e481ffd0e481ffc0e481ffb0e481ffa0d4a1ff9
0d4a1ff80d4a1fec0d4a1feb0d4a1fea0d4a1fe90d4a1fe80d4a1fe70d4a
1fe60c4e1fe50c4e1fe40c4e1fe30c4e1fcf0c4e1fce0c4e1fcd0c4e1fcc
0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fb80c4e
1fb70b561fb60b561fb50b561fb801afb213321fb801aeb213321fb8019e
b213321fb8019db213321fb8019cb212371fb8019bb212371fb8019ab212
371fb80186b212371fb80185b2112e1fb80184b211401fb80183b211401f
b80182b211401fb80181b211401fb80180b211401fb8017fb211401fb801
7eb211401fb8017db211401fb8017cb211401fb8017bb211401fb8017ab2
11401fb80179b211401fb80178b211401fb80177b211401fb80176b21140
1fb80175b211401fb80174b211401fb80173b211401fb80172b211401fb8
0171b211401fb80170b211401fb8016fb211401fb8016eb211401fb8016d
b211401fb8016cb211401fb80141b211401fb80140b210421fb8013fb210
421fb8013eb210421fb8013db210421fb8013cb210421fb8013bb210421f
b8013ab210421fb80139b210421fb80138b210421fb80137b20f451fb801
36b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0f451fb8010cb20f451fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108402f0e481fed0c4e1fd70c4e1fd60c4e1fd50c4e1fd40c4e1fd3
0c4e1fd20c4e1fd10c4e1fd00b561f9309771f9209771fb8016bb212371f
b8016a406e11401f8503251f84032e1f83012e1f8248805581ab80557f48
7d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a55
7bab7a55047a147a020a7948775578ab77550b77010c764875555475e475
f4750314755475647574759475d475e47507a475b475c47503b8ffc04012
75383b46807590750214757475020075010fb8ffc04020750b0e46744872
5573ab72550472247254720339f07201024072016072707202b8ffc0b372
242846b8ffc0401b72161a462072407250720371486f5570ab6f556e486d
55ef6d0110410a03550020035500d003550003000f0354008f035440ff02
006c706c02096a03251f692e675568ab6755662e645565ab6455632e6255
612e60555f2e5d555eab5d555c2e5a555bab5a55592e58555703251f562e
545555ab5455532e515552ab51554f2e4e554e03251f4d2e4b554cab4b55
4a2e485549ab4855504801472e46554503361f001f01001e01001e701e80
1ef01e040b601d701d02701de01df01d03701cf01c027f1b010f1a7f1a8f
1a030f1a8f1a020f1a8f1a020f191f198f199f19af19050f198f199f1903
0c7012801202701180110230114011d011e011040011a011020f8f0f9f0f
af0f034f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f
0eaf0ebf0e0310400e2e31460f0d404b1f0d2f0d033c2f0d3f0d4f0d038f
0d01400d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946ef0aff
0a02400a2427464009262d464009171b4600030120010100011001200103
08b8ffc0b301151f46b80100b316010501b80190b154532b2b4bb807ff52
4bb008505bb00188b02553b00188b040515ab00688b000555a5b58b10101
8e59b101024354b0144b515a58b101018e59858d8d00421d4bb01d5358b0
a01d594bb0805358b0401d594bb0ff5358b0001db1160042592b5e737573
2b2b2b732b73742b2b73745e732b5e7374757374755e73747573015e7374
737475757473745e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b5e737473732b2b2b732b2b73755f755e732b2b2b5e73
73732b7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b742b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e0000>
[3301 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 336 4 <0002ffc0fffa046b05140022002600b8ba0346034700582bb10102435558
b3250c240db80280400d17260b0a23181722002424170ab802cab2001725
b8013c401d40232218031d0a0d001704280f0c1f0c020d030c0c121d5212
550555282b183f3f3f12392f005f5e5d2b17391217391a4ded012fd4ed12
39192f12391239331239391810ed11393931301bb90025013c401d402322
18031d0a0d001704280f0c1f0c020d030c0c121d5212550555282b183f3f
3f12392f005f5e5d2b17391217391a4ded31305925160e0223222e022703
21070e03232226263637013e0333321e021707230121046605011b3e3626
301a0a0123fe1a86071222392b2e33110d1302740a14253f333b45260c02
e001fedf016c62242a15050308100e0104fe0e130a0406172a23047c1115
0b03030b1613c6fdda00>HIBBAA+CALIBRI,BoldItalic AddT42Char 
1 646 18 <00010060ffeb0479052300380069ba0346034700582bb10102435558b31d
1d0010b80308b62d041a041a1509b80179b2345315b8017bb3402856282b
183f1a4ded3fed1139392f2f012fedc4392f31301bb5041a041a1509b801
79b2345315b8017bb3402856282b183f1a4ded3fed1139392f2f31305901
14060623222e0223220e0415141e0233323e0233321615140e0823222e02
35343e0433321e020479131d120d243a5a434a7a60482f172342603c4765
472f130d090406080a0d16405c74426daf7a42264d76a1cd7d467d5d2504
911c5e392126213b617e88873a466a46231e241e1311071c2329231d1623
1e153a76b2775dc9c0ac814c1d302700>HIBBAA+CALIBRI,BoldItalic AddT42Char 
1 1122 38 <00010035fffa03fa050e0027007eba0346034700582bb10102435558400e
0915160816081621200d0d002009b8016fb72124201615151b08b80173b5
4024511b55282b183f3f1a4ded12392f39391239ed012fc4392f10cd3332
107d87c4c431301bb90009016fb72124201615151b08b80173b54024511b
55282b183f3f1a4ded12392f39391239ed31305901140e04232103213216
15140e042321030e0323222e02371336363321321603fa03070a0f140dfe
5946018e0e0c04070b0f140dfe7560021021342627311c0a03ea09362102
5e110904e4061f26292316fea41612071f25292116fe1d0b100a06060a10
0b04962c2716>HIBBAA+CALIBRI,BoldItalic AddT42Char 
1 1368 44 <00010034fffa051f0514002f00c0ba0346034700582bb101024355584017
230c0d220d2218170d17240b0a252f25000a172a522423b8017c401f400b
18252f22041d170a000d04280f0c1f0c020c030c0c121d5212550555282b
183f3f3f12392f005f5e5d2b1739121739c41a4dfdc43f012fd032c0327d
87c4c41101331810c632107d87c4c431301bb32a522423b8017c401f400b
18252f22041d170a000d04280f0c1f0c020c030c0c121d5212550555282b
183f3f3f12392f005f5e5d2b1739121739c41a4dfdc43f313059250e0323
222e02371321030e0323222e0237133e0333321e02070321133e0333321e
02070428021020342626321b0a0368fe1c68021021332627311c0a03f501
1020342626321c09025f01e55e021020342626321c0902230a100a05050a
100a020cfdf40a100a05050a100a04c80a100a05050a100afe2401dc0a10
0a05050a100a>HIBBAA+CALIBRI,BoldItalic AddT42Char 
1 0 0 <00050000fe7303e0050e00030007003b00550056004fb52d162d16083c41
0a023a0049000701b00002002002000008000101b1401204022537060351
1b0d117051015144070254003fdddedd5ddeddcd3fdddecd012fddedd6ed
10fdd6ed1239392f2f3130011121110111211101140e020707060623222e
02373736363333323e0235342e0223220e0223222635343e02373e033332
1e0201140e0207060623222e0235343e0237363633321e020103e0fc4f03
46fd240276204468481e032d25161f1207011905231a0b2f4228120d1d2f
23263a291a06080704060a07082737422245674422fecb04080e090e2b20
1c23130604090f0b0d29211a221307fe26050efaf2050efb570444fbbc03
1136654e3306790d0b02050908a7211b1e303b1e14251d110d0f0d0e0e07
1c1f1c0707120f0a233d51fd9e091c201d0a0d0e0910150c0b1d1f1e0a0e
0c080f16fd21>HIBBAA+CALIBRI,BoldItalic AddT42Char 
HIBBAA+CALIBRI,BoldItalic /CharStrings get begin
/A 4 def
/C 18 def
/F 38 def
/H 44 def
end
HIBBAA+CALIBRI,BoldItalic /Encoding get
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 72 /H put
pop
end
%ADOEndSubsetFont
/XFUTXE+CALIBRI,BoldItalic /HIBBAA+CALIBRI,BoldItalic findfont ct_VMDictPut
/XFUTXE+CALIBRI,BoldItalic*1 
[65{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F /.notdef /H 
183{/.notdef}rp]
XFUTXE+CALIBRI,BoldItalic nf
XFUTXE+CALIBRI,BoldItalic*1 [30.0002 0 0 -30.0002 0 0 ]msf
505.66 48.88 mo
(F)sh
519.429 48.88 mo
(A)sh
537.608 48.88 mo
(C)sh
553.164 48.88 mo
(H)sh
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
381.37 137.812 mo
700.87 137.812 li
710.82 137.812 718.87 129.753 718.87 119.812 cv
718.87 119.812 li
718.87 43.31 li
718.87 33.37 710.82 25.31 700.87 25.31 cv
381.37 25.31 li
371.43 25.31 363.37 33.37 363.37 43.31 cv
363.37 119.812 li
363.37 129.753 371.43 137.812 381.37 137.812 cv
@
385.87 95.835 mo
435.37 95.835 li
445.32 95.835 453.37 87.777 453.37 77.84 cv
453.37 77.84 li
453.37 70.31 li
453.37 60.37 445.32 52.31 435.37 52.31 cv
385.87 52.31 li
375.93 52.31 367.87 60.37 367.87 70.31 cv
367.87 77.84 li
367.87 87.777 375.93 95.835 385.87 95.835 cv
@
484.87 96.132 mo
568.12 96.132 li
578.07 96.132 586.12 88.073 586.12 78.13 cv
586.12 78.13 li
586.12 70.31 li
586.12 60.37 578.07 52.31 568.12 52.31 cv
484.87 52.31 li
474.93 52.31 466.87 60.37 466.87 70.31 cv
466.87 78.13 li
466.87 88.073 474.93 96.132 484.87 96.132 cv
@
613.01 95.906 mo
696.49 95.906 li
706.43 95.906 714.49 87.847 714.49 77.91 cv
714.49 77.91 li
714.49 70.31 li
714.49 60.37 706.43 52.31 696.49 52.31 cv
613.01 52.31 li
603.07 52.31 595.01 60.37 595.01 70.31 cv
595.01 77.91 li
595.01 87.847 603.07 95.906 613.01 95.906 cv
@
453.37 80.95 mo
461.93 80.85 li
@
466.88 80.79 mo
460.38 84.14 li
461.38 82.07 461.35 79.65 460.3 77.6 cv
466.88 80.79 li
cp
ef
586.12 72.43 mo
590.06 72.49 li
@
595.01 72.56 mo
588.42 75.73 li
589.48 73.69 589.52 71.27 588.52 69.19 cv
595.01 72.56 li
cp
ef
439.87 115.147 mo
448.42 115.222 li
@
453.37 115.265 mo
446.81 118.478 li
447.85 116.428 447.87 114.005 446.86 111.938 cv
453.37 115.265 li
cp
ef
381.37 115.312 mo
372.82 115.312 li
@
367.87 115.312 mo
374.41 112.042 li
373.38 114.1 373.38 116.523 374.41 118.582 cv
367.87 115.312 li
cp
ef
453.37 121.424 mo
453.37 109.153 li
@
368.11 109.153 mo
368.11 121.471 li
@
570.37 115.312 mo
581.17 115.312 li
@
586.12 115.312 mo
579.58 118.582 li
580.61 116.523 580.61 114.1 579.58 112.042 cv
586.12 115.312 li
cp
ef
484.87 115.312 mo
471.26 115.312 li
@
466.31 115.312 mo
472.85 112.042 li
471.82 114.1 471.82 116.523 472.85 118.582 cv
466.31 115.312 li
cp
ef
586.12 122.062 mo
586.12 109.79 li
@
466.31 109.743 mo
466.31 122.062 li
@
686.32 115.312 mo
709.42 115.312 li
@
714.37 115.312 mo
707.83 118.582 li
708.86 116.523 708.86 114.1 707.83 112.042 cv
714.37 115.312 li
cp
ef
619.87 115.312 mo
600.07 115.312 li
@
595.12 115.312 mo
601.66 112.042 li
600.63 114.1 600.63 116.523 601.66 118.582 cv
595.12 115.312 li
cp
ef
714.37 121.471 mo
714.37 109.199 li
@
595.33 109.153 mo
595.33 121.471 li
@
%ADOBeginSubsetFont: PBAAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CALIBRI,Bold gcheck setglobal} if
1 6398 856 <0001007dfff301a60128000b0009b209034c003fcd313025140623222635
343633321601a64154544041555340905d403f585e403f00>PBAAAA+CALIBRI,Bold AddT42Char 
1 7536 1004 <00020039ffe903d605250013002b00c7b10102435558b9002dffc0b60f02
4d002d0114ba02950000ffd4400a0f024d0000010f030020bb0295000a00
1bffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d25
180b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b012fedd45f
5e5d2bed31305d2b1b4012002d01092001090a010214010200010f031bb8
ffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d2518
0b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b015f5e5d5d5d
5d31305d5901140e0223222e0235343e0233321e0205342e0423220e0215
141e0233323e0403d63271b58385ae66293371b58285af6628fef70a151f
2c38223b4d2d12162f4a34273c2d1e1307028c9bfab05e5babf79c9afbb0
5e5babf7a95c8d68482b123972aa718ab56b2b19324c647e>PBAAAA+CALIBRI,Bold AddT42Char 
1 8176 1006 <00010058000003bc0525003e0112b10102435558400e042c01042b01093a
010939010b40b8ffc0b60f024d00400116b802eeb633253325330039ba02
ee000bffea400a0f024d000b010f030b2ab80169b61138392020391bb8ff
e8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e531039180b0f
014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f1239
39ed012f5f5e5d2bedcd39392f2f10ed31305d2b005e5d5d015d5d1b4013
042c01042b01093a010939010b0040010f032ab80169b61138392020391b
b8ffe8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e53103918
0b0f014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f
123939ed3130015f5e5d005e5d5d015d5d5925140e022321222e0235343e
0237373e0335342e0223220e0223222e0235343e0633321e0215140e0207
0721321e0203bc050a100afd181620140906101914e043522e1115293e2a
3b5b452e0d090d080503060a194362764065976431184c8a729701fe0a11
0c066b1d291a0b08172c23212f252315f046735f5024213b2c191e251f0c
1c2f22171f171118252318335b7d483f7a8dab719b0c1929>PBAAAA+CALIBRI,Bold AddT42Char 
1 8620 1009 <00010060ffe903b0050e003e00e8b10102435558b70536010535010b40b8
ffc0b60f024d00400137b8020cb5283228320e1dba02c40000ffe0400b0f
024d00000e010f030e3ab80125b322220536b8ffe8b40b0f014c36b80164
b22c5109b80162b71318180b0f014c18b80156b240055600183f1a4dfd2b
d4ed3fed2b12392fed012f5f5e5dd42bed1239392f2fed31305d2b005e5d
5d1b40132a36012a37010536010535010b0040010f033ab80125b3222205
36b8ffe8b40b0f014c36b80164b22c5109b80162b71318180b0f014c18b8
0156b240055600183f1a4dfd2bd4ed3fed2b12392fed3130015f5e5d005e
5d5d015d5d5901140e0223222e0635343e0233321e0233323e0235342e02
232206232226351134363321321e02151406232111363633321e0203b049
85bb723c6c56371108050204090c080a294360433a5f42241e4066493a5f
2a1d191f22026509100b051514fe3423452669a36f3a01a469a5713c0f17
170f1219261a1c27180a171c1718355038304b341a0c1d27023228230c1a
2b1e3c36feeb0402315f8d00>PBAAAA+CALIBRI,Bold AddT42Char 
1 7046 972 <0003003dffe903d00525002700370047011eb10102435558b90049ffc0b6
0f024d00490130bb026f00140028026f400a1e0f231e141e141e0a38ba02
ab0000ffe0400a0f024d0000010f030042b80282b40a353d052db8ffe8b4
0b0f014c2db801134009195945180b0f014c45b80115b240055f00183f1a
4ded2b3fed2b123939012fedd45f5e5d2bed1239392f2f12393910ed10ed
31305d2b1b40490943010942010941010840010a04010647010646010645
01064401063701063601063501063401063301092e01092d01092c01092b
01092a010621010320010b0049010f03353d052db8ffe8b40b0f014c2db8
01134009195945180b0f014c45b80115b240055f00183f1a4ded2b3fed2b
1239393130015f5e5d005e5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d015d5d
5d5d5d5901140e0223222e0235343e02372e0335343e0233321e0215140e
02071e0301342e0223220615141e0217363613342e02270e031514163332
3603d03d77b0736ea670382141613f33523a1e376da46c6b99622f1f3852
343d604223fede142b3f2b5452152c4630494f1e193550352e462e176564
6261015b588a5f312c557d5137615349211c414d5c364e7f5d322e547547
2f5950471d2048535e023d233827144d442036302e1a2b62fdb6253d3632
1a1932373d234e525400>PBAAAA+CALIBRI,Bold AddT42Char 
1 9022 1012 <ffff003dffe903d00525020603cc0000>PBAAAA+CALIBRI,Bold AddT42Char 
1 9038 1013 <00020042ffe903bf05250030004200d8b10102435558b90044ffc0b70f02
4d0044011d31b80291b3000e0e00b8ffe0400a0f024d0000010f03003bb8
0279b72540180b0f014c40b80128b320200736b8ffe8b40b0f014c36b801
2a40092a5318180b0f014c18b8012bb240075600183f1a4ded2b3fed2b12
392fed2b012fedc45f5e5d2b392f10ed3231305d2b1bb50044010f0340b8
fff0400a0b014d40180b0f014c40b80128400920200736100b014d36b8ff
e8b40b0f014c36b8012a40092a5318180b0f014c18b8012bb24007560018
3f1a4ded2b3fed2b2b12392fed2b2b3130015f5e5d5901140e0423222e04
35343e0233321e0233323e0237060623222e0235343e0233321e0405342e
0223220e0215141e0233323603bf102d4f7db37a2b554631160a03090d09
0c2c3f503154744822022e825467905a293a72aa705a876141250ffefb18
3048302f442d161329422f3a6702c24fa9a2926d400c1214152824212816
070e120e3c66864a1d2b3666925c61a377422a4e6f889e326b905624213c
52313551351a2300>PBAAAA+CALIBRI,Bold AddT42Char 
1 666 17 <0003008d00000436050e001e002b0038009fb10102435558b9001f0293b5
1a0b15150b00b8029cb22c2633b80279b20b1a27b80103b331310724b8ff
e8b40b0f014c24b801254009105134180b0f014c34b80129b24007540018
3f1a4ded2b3fed2b12392fed39012fed322fed11392f1239ed31301bb11a
27b80103b331310724b8ffe8b40b0f014c24b801254009105134180b0f01
4c34b80129b240075400183f1a4ded2b3fed2b12392fed3931305901140e
0423212226351134363321321e0215140e02071e0301342e022323113332
3e0213342e0223231133323e02043626435d707f4efea8212d2d21014577
a5713c182e432b375d4528feac1830493d859339442d16431e3a5a489cbe
374b371f01844570563e2813272c04682c2728517c542f534434100a324f
6a01df273e2916feb01b2f3ffdf92d47301afe90172d4300>PBAAAA+CALIBRI,Bold AddT42Char 
1 1284 28 <0001008d0000038c050e002c00b0b10102435558b11a27b80292400f0913
2013200009001a180d0f014c1aba01290026ffe8b60d014d26260619b8ff
e8b40b0f014c19b8012e40090d5127180b0f014c27b8012eb24006540018
3f1a4ded2b3fed2b12392f2bed2b012f2f1239392f2f10ed3231301bb61a
180d0f014c1aba01290026ffe8b60d014d26260619b8ffe8b40b0f014c19
b8012e40090d5127180b0f014c27b8012eb240065400183f1a4ded2b3fed
2b12392f2bed2b31305925140e0223212226351134363321321e0215140e
0223211121321e0215140e0223211121321e02038c050a0f09fd76212d2d
210286090e0a05050a0e09fe320187090f0a05050a0f09fe7901d2090f0a
05671d27180b272c04682c270a19271e1c27180bfec40b17271c1d26170a
fe930b182700>PBAAAA+CALIBRI,Bold AddT42Char 
1 2346 62 <0001008d000003540514001a004bb10102435558b900150294400b00090f
5215180b0f014c15b8015db240065400183f1a4ded2b3f012fcded31301b
40090f5215180b0f014c15b8015db240065400183f1a4ded2b3f31305925
140e02232122263511343e0233321e02151121321e020354050a0f0afdaf
212d0d1e332627321e0d01970a0f0a056e1e291b0c272c04970a100a0606
0a100afbef0b1929>PBAAAA+CALIBRI,Bold AddT42Char 
1 2504 68 <0001008dfffa0671050e003c00d9b10102435558400b0d3030172f2f0a2e
18181ab80264b424310c0c0ab80264b700243651190c0b18bb012d004000
2efff0b41023024c31b8fff040201023024c17101023024c0d101023024c
0d172f30312e061f28511f551255055500183f3f3f3f1217392b2b2b2b1a
4ded3232323f012fd4ed32113310ed32113311393d2f3333113331301bb5
3651190c0b18bb012d0040002efff0b41023024c31b8fff040201023024c
17101023024c0d101023024c0d172f30312e061f28511f55125505550018
3f3f3f3f1217392b2b2b2b1a4ded3232323f31305925140e0223222e0235
1123010e0323222e0227012311140e0223222e02351134363333321e0217
0133013e033333321e021506710b1d302524301c0c02fe8904121f302222
301f1203fe96020b1e2f2524301d0b362dac2e4230200c01180401220d1f
293825b11b27190d240a100a06060a100a041dfbe40d110a03050b100b04
1cfbe30a100a06060a100a048133360f23392afcfd03012a3a240f0e1b27
1900>PBAAAA+CALIBRI,Bold AddT42Char 
1 3252 75 <00020050ffe905190525001300270071b10102435558bf001402c2000000
1e02c2000a0019ffe8b40b0f014c19b8015c40090f5323180b0f014c23b8
015db240055600183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8015c40090f5323180b0f014c23b8015db240055600183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e020519509ee99997e1964b509ee99a93e1974dfe
ec204d806061825021204c8061618250210296a1feb15d4fa2faab9dfbb0
5e4ea2f7b666a77741497aa35b6aa9783f487ca5>PBAAAA+CALIBRI,Bold AddT42Char 
1 3482 87 <0002008dfffa0403050e001c00290080b10102435558b12406bb02930011
001d02c14009001125180b0f014c25b8012bb306060c23b8ffe8b40b0f01
4c23b8012bb44015510c5500183f3f1a4ded2b12392fed2b012fd4ed10ed
3231301bb625180b0f014c25b8012bb306060c23b8ffe8b40b0f014c23b8
012bb44015510c5500183f3f1a4ded2b12392fed2b31305901140e022323
11140e0223222e02351134363321321e0405342e0223231133323e020403
4482bd806c0d1e322726331e0c312801312e537477542cfeed30464d2970
763f55361c03856da8733cfe630a100a06060a100a048c2f2f07173e5f7f
6244582a0bfe49223d55>PBAAAA+CALIBRI,Bold AddT42Char 
1 3732 90 <0002008dfffa044d050e00360044009db10102435558b4102e11290abb02
c600000037029bb2293f11b80293b21c2e10b8ffe8b40b0f014c10b80125
b34040173db8ffe8b40b0f014c3db80129b64021511755055500183f3f3f
1a4ded2b12392fed2b39012fed32d4edd4ed1112393931301bb12e10b8ff
e8b40b0f014c10b80125b34040173db8ffe8b40b0f014c3db80129b64021
511755055500183f3f3f1a4ded2b12392fed2b3931305925140e0223222e
0227032e03232311140e0223222e023511343633213216171e0315140e02
071e031717161601342627262623231133323e02044d081e3a322a321d0c
0474152831402a520d1e322726331e0c2d21014f33421b4e7d572e21405e
3c1d332d28136d0f0afead3a4214332d76863854381c220b0f0a04040b11
0c0121314c331afe130a100a06060a100a04972c2704030b3657774d416b
543e130e2839492eff262303644058120506fe911b314400>PBAAAA+CALIBRI,Bold AddT42Char 
1 4086 94 <0001003fffe9038c0525004900bbb10102435558b900410297b524322432
0c1bb8029cb2000c2ebb012d0037000a012db61137113711163cb8ffe8b4
0b0f014c3cb8012d400c411b05295316180b0f014c16b80158b240055600
183f1a4ded2b3f123939ed2b1139392f2f10ed10ed012fd4ed1239392f2f
ed31301bbc002e012d0037000a012db61137113711163cb8ffe8b40b0f01
4c3cb8012d400c411b05295316180b0f014c16b80158b240055600183f1a
4ded2b3f123939ed2b1139392f2f10ed10ed31305901140e0223222e0435
343e0233321e0233323e0235342e0635343e0233321e0615140e0223222e
0223220e0215141e06038c4c82ae634373583b1a0b04090f0a0e33506f49
304c351c304d6268624d3045759f592e5c503e1407050203070d0b0b3046
5c372b402b152f4f6468644e300184669a6734161f221a312e1f2a1a0b21
2821172a3e262c3f312b303d5574515d8d5d2e0e181e140e17231a1d281a
0c1c211b1525341d2b3f312b303d5573>PBAAAA+CALIBRI,Bold AddT42Char 
1 4462 100 <0001000cfffa03ea050e00220055b10102435558b10006b80294b3181106
12b8ffe8b40b0f014c12b8015bb4401d510c5500183f3f1a4ded2b32012f
c4fdcd31301bb10612b8ffe8b40b0f014c12b8015bb4401d510c5500183f
3f1a4ded2b3231305901140e02232111140e0223222e02351121222e0235
343e023321321e0203ea050a0f09febc0d1e332626331e0dfebc0a0e0a05
050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a100a04130c19
291d1e2a190b0b192a00>PBAAAA+CALIBRI,Bold AddT42Char 
1 5712 400 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>PBAAAA+CALIBRI,Bold AddT42Char 
PBAAAA+CALIBRI,Bold /CharStrings get begin
/period 856 def
/zero 1004 def
/two 1006 def
/five 1009 def
/eight 1012 def
/nine 1013 def
/B 17 def
/E 28 def
/L 62 def
/M 68 def
/O 75 def
/P 87 def
/R 90 def
/S 94 def
/T 100 def
/s 400 def
end
PBAAAA+CALIBRI,Bold /Encoding get
dup 46 /period put
dup 48 /zero put
dup 50 /two put
dup 53 /five put
dup 56 /eight put
dup 57 /nine put
dup 66 /B put
dup 69 /E put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XFUTXD+CALIBRI,Bold*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five 
2{/.notdef}rp /eight /nine 7{/.notdef}rp /A /B /C /.notdef 
/E /F /.notdef /H 3{/.notdef}rp /L /M /.notdef 
/O /P /.notdef /R /S /T 30{/.notdef}rp /s 
140{/.notdef}rp]
XFUTXD+CALIBRI,Bold nf
XFUTXD+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
384.42 122.512 mo
(0)sh
396.58 122.512 mo
(.)sh
402.99 122.512 mo
(5)sh
415.154 122.512 mo
(8)sh
427.32 122.512 mo
(s)sh
628.51 122.512 mo
(0)sh
640.67 122.512 mo
(.)sh
647.08 122.512 mo
(9)sh
659.244 122.512 mo
(2)sh
671.41 122.512 mo
(s)sh
52.816 73.25 mo
(P)sh
65.5895 73.25 mo
(C)sh
78.2925 73.25 mo
(H)sh
136 90.773 mo
(S)sh
147.344 90.773 mo
(T)sh
159.226 90.773 mo
(A)sh
173.769 90.773 mo
(B)sh
187.222 90.773 mo
(L)sh
197.371 90.773 mo
(E)sh
239.72 87.707 mo
(P)sh
252.494 87.707 mo
(R)sh
266.005 87.707 mo
(O)sh
282.235 87.707 mo
(M)sh
303.212 87.707 mo
(O)sh
319.442 87.707 mo
(T)sh
331.325 87.707 mo
(E)sh
%ADOBeginSubsetFont: HIBBAA+CALIBRI,BoldItalic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CALIBRI,BoldItalic gcheck setglobal} if
1 2044 87 <00020034fffa0460050e001f002f0082ba0346034700582bb10102435558
b9000002ee400c201328080927092709141328b8013db71417130908080e
27b8013db54017510e55282b183f3f1a4ded12392f39391239ed012fc633
32107d87c4c4011810d4ed31301bb90028013db71417130908080e27b801
3db54017510e55282b183f3f1a4ded12392f39391239ed31305901140e04
2323030e0323222e023713363633213216171e0305342627262623230333
323e04046019385981aa738753021022342625311c0a03e9093c2c011b34
52283d614424feeb2e3015342074567839513d2b1b0c03d1387a7569512f
fe620a100a05050a0f0b048d2f2f07080c324b655e30460e0705fe491b2c
3c424300>HIBBAA+CALIBRI,BoldItalic AddT42Char 
HIBBAA+CALIBRI,BoldItalic /CharStrings get begin
/P 87 def
end
HIBBAA+CALIBRI,BoldItalic /Encoding get
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XFUTXE+CALIBRI,BoldItalic*1 
[65{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F /.notdef /H 
7{/.notdef}rp /P 175{/.notdef}rp]
XFUTXE+CALIBRI,BoldItalic nf
XFUTXE+CALIBRI,BoldItalic*1 [30.0002 0 0 -30.0002 0 0 ]msf
163.63 47.81 mo
(P)sh
179.597 47.81 mo
(C)sh
195.153 47.81 mo
(H)sh
43.874 137.812 mo
331.1 137.812 li
341.05 137.812 349.1 129.753 349.1 119.812 cv
349.1 119.812 li
349.1 43.31 li
349.1 33.37 341.05 25.31 331.1 25.31 cv
43.874 25.31 li
33.933 25.31 25.874 33.37 25.874 43.31 cv
25.874 119.812 li
25.874 129.753 33.933 137.812 43.874 137.812 cv
@
52.874 97.312 mo
93.374 97.312 li
103.31 97.312 111.37 89.253 111.37 79.31 cv
111.37 79.31 li
111.37 69.89 li
111.37 59.95 103.31 51.89 93.374 51.89 cv
52.874 51.89 li
42.933 51.89 34.874 59.95 34.874 69.89 cv
34.874 79.31 li
34.874 89.253 42.933 97.312 52.874 97.312 cv
@
141.25 95.906 mo
205.87 95.906 li
215.81 95.906 223.87 87.847 223.87 77.91 cv
223.87 77.91 li
223.87 70.31 li
223.87 60.37 215.82 52.31 205.87 52.31 cv
141.25 52.31 li
131.31 52.31 123.25 60.37 123.25 70.31 cv
123.25 77.91 li
123.25 87.847 131.31 95.906 141.25 95.906 cv
@
255.37 95.906 mo
327.37 95.906 li
337.31 95.906 345.37 87.847 345.37 77.91 cv
345.37 77.91 li
345.37 70.31 li
345.37 60.37 337.32 52.31 327.37 52.31 cv
255.37 52.31 li
245.43 52.31 237.37 60.37 237.37 70.31 cv
237.37 77.91 li
237.37 87.847 245.43 95.906 255.37 95.906 cv
@
112.5 74.81 mo
118.3 74.79 li
@
123.25 74.78 mo
116.72 78.07 li
117.74 76.01 117.74 73.58 116.7 71.53 cv
123.25 74.78 li
cp
ef
223.87 74.81 mo
232.67 74.84 li
@
237.62 74.85 mo
231.07 78.1 li
232.1 76.05 232.11 73.63 231.09 71.56 cv
237.62 74.85 li
cp
ef
101.25 109.153 mo
107.55 109.153 li
@
112.5 109.153 mo
105.96 112.423 li
106.99 110.364 106.99 107.941 105.96 105.883 cv
112.5 109.153 li
cp
ef
47.249 109.153 mo
40.949 109.153 li
@
35.999 109.153 mo
42.539 105.883 li
41.509 107.941 41.509 110.364 42.539 112.423 cv
35.999 109.153 li
cp
ef
112.5 115.312 mo
112.5 103.04 li
@
36.179 102.993 mo
36.179 115.312 li
@
213.97 110.174 mo
218.92 110.174 li
@
223.87 110.174 mo
217.33 113.444 li
218.36 111.386 218.36 108.963 217.33 106.904 cv
223.87 110.174 li
cp
ef
132.68 109.153 mo
127.57 109.153 li
@
122.62 109.153 mo
129.16 105.883 li
128.13 107.941 128.13 110.364 129.16 112.423 cv
122.62 109.153 li
cp
ef
223.87 116.334 mo
223.87 104.062 li
@
122.77 102.993 mo
122.77 115.312 li
@
322.87 110.221 mo
339.25 110.221 li
@
344.2 110.221 mo
337.66 113.491 li
338.69 111.433 338.69 109.01 337.66 106.951 cv
344.2 110.221 li
cp
ef
262.05 110.075 mo
244.57 110.189 li
@
239.62 110.221 mo
246.14 106.909 li
245.13 108.974 245.14 111.397 246.19 113.449 cv
239.62 110.221 li
cp
ef
344.2 116.381 mo
344.2 104.109 li
@
239.8 104.062 mo
239.8 116.381 li
@
%ADOBeginSubsetFont: PBAAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CALIBRI,Bold gcheck setglobal} if
1 7860 1005 <00010094000003b00517002e00b5b10102435558400d0929010928010827
0101120130b8ffc040090f024d403001030029b80292b31e180b11b8ffde
b50f024d111312b8017d40092352290f10010b0510b8012bb24006540018
3f1a4ded5f5e5d323ffdcd012f2bcdc433fdcd31305f5d2b005d015d5d5d
1b4018292801292901092901092801082701011201403001031312b8017d
40092352290f10010b0510b8012bb240065400183f1a4ded5f5e5d323ffd
cd3130015f5d005d015d5d5d5d5d5925140e022321222e0235343e023333
11070606262635343e0237253e0333321e02151133321e0203b0060b0e09
fd36080e0b06050b0e09f1d0171d110602080e0c0116050f18271f262f18
08d3090f0b05641c27170a0a17271c1d27180b034a730b05112a26181f16
0e08b40405030103070c09fbd30b1827>PBAAAA+CALIBRI,Bold AddT42Char 
PBAAAA+CALIBRI,Bold /CharStrings get begin
/one 1005 def
end
PBAAAA+CALIBRI,Bold /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XFUTXD+CALIBRI,Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 
2{/.notdef}rp /eight /nine 7{/.notdef}rp /A /B /C /.notdef 
/E /F /.notdef /H 3{/.notdef}rp /L /M /.notdef 
/O /P /.notdef /R /S /T 30{/.notdef}rp /s 
140{/.notdef}rp]
XFUTXD+CALIBRI,Bold nf
XFUTXD+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
49.136 115.762 mo
(0)sh
61.3 115.762 mo
(.)sh
67.71 115.762 mo
(2)sh
79.8744 115.762 mo
(1)sh
92.038 115.762 mo
(s)sh
267.46 117.422 mo
(0)sh
279.62 117.422 mo
(.)sh
286.03 117.422 mo
(2)sh
298.194 117.422 mo
(9)sh
310.36 117.422 mo
(s)sh
565.87 154.415 mo
713.92 154.415 li
@
718.87 154.415 mo
712.33 157.685 li
713.36 155.627 713.36 153.204 712.33 151.145 cv
718.87 154.415 li
cp
ef
497.47 154.462 mo
368.32 154.462 li
@
363.37 154.462 mo
369.91 151.192 li
368.88 153.251 368.88 155.674 369.91 157.732 cv
363.37 154.462 li
cp
ef
718.87 160.575 mo
718.87 148.303 li
@
364.36 148.303 mo
364.36 160.621 li
@
%ADOBeginSubsetFont: PBAAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CALIBRI,Bold gcheck setglobal} if

1 0 3 <> PBAAAA+CALIBRI,Bold AddT42Char 
1 4652 121 <00010021fffa04440514002f007fb10102435558bc002202940018002402
50400a2e172f2e182e182e000cb80264b440160b200ab80295401240000b
2023230b2952230b111d521155055500183f3f3f1239393f01192f332f1a
1810dd1a4ded1a10dd1aed1239392f2f12393910ed10ed31301b400b2952
230b111d521155055500183f3f3f1239393f313059251616060623222e02
2703030e0323222626363701012626363633321e021713133e0333321616
0607010427120b183f382f361f0e05f3f2060e1f372d3439140c130136fe
e0120d173e392f37200d06e3dd060d1d332d323a160b11fee063232a1606
0409100c01d3fe2d0c10090406162a2302350213242b15050409100cfe54
01ac0c10090405162a24fdf0>PBAAAA+CALIBRI,Bold AddT42Char 
PBAAAA+CALIBRI,Bold /CharStrings get begin
/space 3 def
/X 121 def
end
PBAAAA+CALIBRI,Bold /Encoding get
dup 32 /space put
dup 88 /X put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XFUTXD+CALIBRI,Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
2{/.notdef}rp /five 2{/.notdef}rp /eight /nine 7{/.notdef}rp /A /B 
/C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 
/M /.notdef /O /P /.notdef /R /S /T 
3{/.notdef}rp /X 26{/.notdef}rp /s 140{/.notdef}rp]
XFUTXD+CALIBRI,Bold nf
XFUTXD+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
516.83 161.662 mo
(X)sh
530.049 161.662 mo
( )sh
535.474 161.662 mo
(s)sh
XFUTXD+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
506.37 112.312 mo
(M)sh
523.851 112.312 mo
(A)sh
535.97 112.312 mo
(X)sh
753.23 137.812 mo
763.87 137.812 li
773.81 137.812 781.87 129.753 781.87 119.812 cv
781.87 119.812 li
781.87 43.31 li
781.87 33.37 773.82 25.31 763.87 25.31 cv
753.23 25.31 li
743.29 25.31 735.23 33.37 735.23 43.31 cv
735.23 119.812 li
735.23 129.753 743.29 137.812 753.23 137.812 cv
@
718.26 81.56 mo
729.67 81.56 li
@
734.62 81.56 mo
728.08 84.83 li
729.11 82.77 729.11 80.35 728.08 78.29 cv
734.62 81.56 li
cp
ef
%ADOBeginSubsetFont: HIBBAA+CALIBRI,BoldItalic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CALIBRI,BoldItalic gcheck setglobal} if
1 902 24 <0002003b000004f6050e001800270064ba0346034700582bb10102435558
b9000002ed400919201f100f100f091fb80140b2135120b8016cb3400954
282b183f1a4ded3fed123939012fc63233d4ed31301bb3100f091fb80140
b2135120b8016cb3400954282b183f1a4ded3fed12393931305901140e06
2321222e02371336363321321e0205342e0223230333323e0404f60f233b
58799ec689feb7101d130705e208362501389acf8b45feec224c776489b1
8a698f6d4d3116033a3c868b897d6c4f2c0813201804682c273c76af923f
6c4e2cfc903359758288>HIBBAA+CALIBRI,BoldItalic AddT42Char 
HIBBAA+CALIBRI,BoldItalic /CharStrings get begin
/D 24 def
end
HIBBAA+CALIBRI,BoldItalic /Encoding get
dup 68 /D put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XFUTXE+CALIBRI,BoldItalic*1 
[65{/.notdef}rp /A /.notdef /C /D /.notdef /F /.notdef 
/H 7{/.notdef}rp /P 175{/.notdef}rp]
XFUTXE+CALIBRI,BoldItalic nf
XFUTXE+CALIBRI,BoldItalic*1 [23.9998 0 0 -23.9998 0 0 ]msf
737.03 89.943 mo
(D)sh
752.159 89.943 mo
(C)sh
764.604 89.943 mo
(H)sh
%ADOBeginSubsetFont: PBAAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CALIBRI,Bold gcheck setglobal} if
1 6600 894 <0001006bfe9f021c059000230022bf001a01fa0000001001f90006000302
74b3151f0b85003f2f012ffdd6edd6ed3130010602151412171614060623
222e02272e0335343e02373e0333321e0202175456575206162d281c281b
0f033650351a1b364f35020c182920242e18030558c3fe61dadbfe63c610
17100804070b0768d3d7db7170dbd7d46905080703070e16>PBAAAA+CALIBRI,Bold AddT42Char 
1 6744 895 <00010061fe9f0212059000210024b900000273b2121505bb01fa000f001f
01fbb3151a0a85003f2f012fedd6ed10d6ed313001140e02070e03232226
263437361235340227263e0233321e0217161202121a354f36030f1b281c
292d1606535756550503192d251f281a0b03686c021a71dbd7d368070b07
0408101710c4019fdbda019fc30d160e0703070805d2fe53>PBAAAA+CALIBRI,Bold AddT42Char 
1 6290 853 <00010017fedc01a60121001b0015b11000b8028eb3120b171c0010d4cd01
2fedc6313025140e0207070e0323222e02371335343e0233321e0201a608
121c1586071118221a1d241001057a102234252332210fb828413a371dc0
0a0e0805050a100b01149e222a160707162a>PBAAAA+CALIBRI,Bold AddT42Char 
1 4934 122 <00010010fffa04180514002a004db10102435558b900170295b20d0c20b8
0279b22a1b00b80294400a400c25521b061252065500183f3f12393f012f
1a4dfd39dded10d6ed31301bb725521b061252065500183f3f12393f3130
590111140e0223222e023511012626363633321e02171316161733363637
133e0333321616060702980d1e332627321f0cfe9e130b173e372e37200f
0790152915021328138e050f1e342b393f170c1201ebfe390a100a06060a
100a01c702c125291505040b120efec22e663836662e013c10130c040515
2a24>PBAAAA+CALIBRI,Bold AddT42Char 
PBAAAA+CALIBRI,Bold /CharStrings get begin
/parenleft 894 def
/parenright 895 def
/comma 853 def
/Y 122 def
end
PBAAAA+CALIBRI,Bold /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 89 /Y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XFUTXD+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period /.notdef /zero /one /two 2{/.notdef}rp /five 2{/.notdef}rp 
/eight /nine 7{/.notdef}rp /A /B /C /.notdef /E 
/F /.notdef /H 3{/.notdef}rp /L /M /.notdef /O 
/P /.notdef /R /S /T 3{/.notdef}rp /X /Y 
25{/.notdef}rp /s 140{/.notdef}rp]
XFUTXD+CALIBRI,Bold nf
XFUTXD+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
128.99 130.903 mo
(\()sh
135.22 130.903 mo
(Y)sh
145.61 130.903 mo
( )sh
%ADOBeginSubsetFont: QJJAAA+CALIBRI,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+CALIBRI,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc12db27000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79664885e3d500007910000024dc68656164e606fe46000010480000
0036686865610d8d071e0000108000000024686d74788cc00cf6000010a4
000026326c6f6361c5e6bf66000036d800001e466d6178701bff16650000
5520000000206e616d658fc48c9b0000554000000e3470726570c7f0742e
000063740000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e10002ff4000acff00000009000000004d53202000200000
20130600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
000000059eb8f13f71505f0f3cf50019080000000000bbeb7ccc00000000
c5229872fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000003f7
040e0000000000000000000001cf000004d9001700000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000047c008d043c004f0000000000000000000000000000
0000000000000000000000000000000000000000000003e7008d00000000
000000000000000000000000000000000000000000000000000000000000
000003ac008d0000000000000000000000000000000000000000050c008d
00000000000000000222008d000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000362008d000000000000000000000000000000000000
000006fe008d0545008d0000000000000000000000000000000000000000
056900500000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000442008d0000000000000000
0481008d00000000000000000000000003c8003f00000000000000000000
0000000000000000000003f6000c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000468002104280010000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000331004900000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000000000000000000000000000000000000210001700000000
000000000223007d00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000273003b0000000003fcfff5
000000000000000000000000000000000000000000000000000000000000
000000000000027e006b027e006100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000040e003d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000040e0039
040e0094040e00580000000000000000040e00600000000000000000040e
003d040e0042000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000009e009e009e009e014d014d014d014d014d014d014d014d014d014d
014d014d014d01ef0282028202820282028202820282028202820282031b
031b031b031b031b031b031b031b031b031b03b203b203b203b203b203b2
045d045d045d049504950495049504950495049504950495049504950495
04950495049504e404e404e404e404e404e405a8065a065a065a065a065a
065a06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd074a074a
074a07fb07fb07fb07fb08b708b708b708b708b708b70916091609160916
091609160916091609160916091609160916091609160916091609160916
0916091609a30a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d
0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0a0d0aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa90aa9
0aa90aa90aa90aa90aa90aa90aa90b280b280b280b280bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb0bfb
0bfb0bfb0bfb0c490c490c490c490c490c490c490c490c490c490c490c7f
0c7f0c7f0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a
0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0cbf0cbf
0ce40ce40ce40ce40ce40ce40ce40ce40ce40ce40d2c0d740d740d740d74
0d740d740d740d740d740d740d740d740d740d740d740d740d740d740d74
0d740d740d740d740d740dc30dc30dc30dc30dc30dc30dc30dc30dc30dc3
0dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc3
0dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc3
0dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30dc30eb80eb8
0eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb8
0eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb80eb8
0f5a0ff810d610d610d6119f119f119f11a7126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e126e126e126e126e126e126e126e126e126e126e
126e126e126e126e126e0000000100000f22004f00050048000300020010
002f006000000c63159c000100010000002d022200000003000000000064
00000000000300000001000e006400000003000000020008032a00000003
00000003003a030400000003000000040018031a00000003000000050018
033e000000030000000600180356000000030000000700fa036e00000003
00000008002a03e4000000030000000900200468000000030000000a02a0
0064000000030000000b00560488000000030000000c002a04de00000003
0000000d02980508000000030000000e006c07a000010000000000000032
080c00010000000000010007083e0001000000000002000409a100010000
00000003001d098e0001000000000004000c09990001000000000005000c
09ab0001000000000006000c09b70001000000000007007d09c300010000
00000008001509fe000100000000000900100a40000100000000000a0150
083e000100000000000b002b0a50000100000000000c00150a7b00010000
0000000d014c0a90000100000000000e00360bdc00030001040900000064
00000003000104090001000e006400030001040900020008032a00030001
04090003003a030400030001040900040018031a00030001040900050018
033e000300010409000600180356000300010409000700fa036e00030001
04090008002a03e4000300010409000900200468000300010409000a02a0
0064000300010409000b00560488000300010409000c002a04de00030001
0409000d02980508000300010409000e006c07a000a90020003200300030
00380020004d006900630072006f0073006f0066007400200043006f0072
0070006f0072006100740069006f006e002e00200041006c006c00200052
00690067006800740073002000520065007300650072007600650064002e
00430061006c0069006200720069002000690073002000610020006d006f
006400650072006e002000730061006e0073002000730065007200690066
002000660061006d0069006c007900200077006900740068002000730075
00620074006c006500200072006f0075006e00640069006e006700730020
006f006e0020007300740065006d007300200061006e006400200063006f
0072006e006500720073002e002000490074002000660065006100740075
0072006500730020007200650061006c0020006900740061006c00690063
0073002c00200073006d0061006c006c00200063006100700073002c0020
0061006e00640020006d0075006c007400690070006c00650020006e0075
006d006500720061006c00200073006500740073002e0020004900740073
002000700072006f0070006f007200740069006f006e007300200061006c
006c006f00770020006800690067006800200069006d0070006100630074
00200069006e002000740069006700680074006c00790020007300650074
0020006c0069006e006500730020006f0066002000620069006700200061
006e006400200073006d0061006c006c0020007400650078007400200061
006c0069006b0065002e002000430061006c006900620072006900270073
0020006d0061006e0079002000630075007200760065007300200061006e
006400200074006800650020006e00650077002000720061007300740065
007200690073006500720020007400650061006d00200075007000200069
006e0020006200690067006700650072002000730069007a006500730020
0074006f002000720065007600650061006c002000610020007700610072
006d00200061006e006400200073006f0066007400200063006800610072
00610063007400650072002e004d006900630072006f0073006f00660074
003a002000430061006c006900620072006900200042006f006c0064003a
0020003200300030003500560065007200730069006f006e00200035002e
0036003200430061006c0069006200720069002d0042006f006c00640043
0061006c0069006200720069002000690073002000650069007400680065
007200200061002000720065006700690073007400650072006500640020
00740072006100640065006d00610072006b0020006f0072002000610020
00740072006100640065006d00610072006b0020006f00660020004d0069
00630072006f0073006f0066007400200043006f00720070006f00720061
00740069006f006e00200069006e002000740068006500200055006e0069
007400650064002000530074006100740065007300200061006e0064002f
006f00720020006f007400680065007200200063006f0075006e00740072
006900650073002e004c0075006300280061007300290020006400650020
00470072006f006f00740068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f006300740066006f
006e007400730068007400740070003a002f002f0066006f006e00740066
0061006200720069006b002e0063006f006d0059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e0061007300700078a92032303038204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e4d6963726f736f66743a2043616c6962726920426f6c643a
203230303556657273696f6e20352e363243616c696272692d426f6c6443
616c69627269206973206569746865722061207265676973746572656420
74726164656d61726b206f7220612074726164656d61726b206f66204d69
63726f736f667420436f72706f726174696f6e20696e2074686520556e69
7465642053746174657320616e642f6f72206f7468657220636f756e7472
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078b10903b802f9b21e1d1f
b802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802
f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b2
1e2c1fb802efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c
1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb8
02e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3
b21e2c1fb802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d
2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191f
b802dab21d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802
d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b2
1d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d12
1fb802cdb21d121fb802ccb21d121fb802cbb21d121fb802cab21d191fb8
02c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5
b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d
2f1fb802c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d2f1f
b802bcb21d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802
b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b2
1d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c32
1fb802afb21c331fb802aeb21c331fb802adb21c331fb802acb21c331fb8
02abb21c331fb802aab21c311fb802a9b21c311fb802a8b21c321fb802a7
b21c321fb802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3b21c
321fb802a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c331f
b8029eb21c331fb8029db21c331fb8029cb21c311fb8029bb21c311fb802
9ab21c321fb80299b21c321fb80298b21c321fb80297b21c321fb80296b2
1c321fb80295b21c331fb80294b21c331fb80293b21c331fb80292b21c33
1fb80291b21c331fb80290b21c331fb8028fb21c331fb8028eb21c311fb8
028db21c321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb80289
b21c321fb80288b21c331fb80287b21c331fb80286b21c331fb80285b21c
331fb80284b21c331fb80283b21c331fb80282b21b341fb80281b21b341f
b80280b21b341fb8027fb21b341fb8027eb21b341fb8027db21b341fb802
7cb21b341fb8027bb21b341fb8027ab21b341fb80279b21b341fb80278b2
1b341fb80277b21b341fb80276b21b341fb80275b21b341fb80274b21b34
1fb80273b21b341fb80272b21b341fb80271b21b341fb80270b21b341fb8
026fb21a351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8026b
b21a351fb8026ab21a351fb80269b21a351fb80268b21a351fb80267b21a
351fb80266b21a351fb80265b21a351fb80264b21a351fb80263b21a351f
b80262b21a351fb80261b21a351fb80260b21a351fb8025fb21a351fb802
5eb21a351fb8025db21a351fb8025cb21a351fb8025bb21a351fb8025ab2
1a351fb80259b219371fb80258b219371fb80257b219371fb80256b21937
1fb80255b219371fb80254b219371fb80253b219371fb80252b219371fb8
0251b219371fb80250b219371fb8024fb219371fb8024eb219371fb8024d
b219371fb8024cb219371fb8024bb219371fb8024ab219371fb80249b219
371fb80248b219371fb80247b219371fb80246b219371fb80245b219371f
b80244b219371fb80243b219371fb80242b219371fb80241b219371fb802
40b219371fb8023fb219371fb8023eb219371fb8023db219371fb8023cb2
19371fb8023bb219371fb8023ab219371fb80239b218391fb80238b21839
1fb80237b218391fb80236b218391fb80235b218391fb80234b218391fb8
0233b218391fb80232b218391fb80231b218391fb80230b218391fb80301
b2182e1fb8022fb218391fb8022eb218391fb8022db218391fb8022cb218
391fb8022bb218391fb8022ab218391fb80229b218391fb80228b218391f
b80227b218391fb80226b218391fb80225b2173b1fb80224b2173b1fb802
23b217321fb80222b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2
173b1fb8021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b
1fb8021ab2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b1fb8
0216b2173b1fb80215b217321fb80214b2173a1fb80213b2173b1fb80212
b2173b1fb80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020eb217
3b1fb8020db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1f
b80209b217321fb80208b217321fb80207b2173b1fb80206b2173b1fb802
05b2173b1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb80201b2
173b1fb80200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b
1fb801fcb2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b1fb8
01f8b2173b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4
b2173b1fb801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0b217
3b1fb801efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1f
b801ebb2173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1fb801
e7b217321fb801e6b216231fb801e5b216231fb801e4b216371fb801e3b2
16371fb801e2b216381fb801e1b216381fb801e0b216431fb801dfb21644
1fb801deb216441fb801ddb216441fb801dcb216451fb801dbb216461fb8
01dab216461fb801d9b216461fb801d8b216231fb801d7b216231fb801d6
b216381fb801d5b216431fb801d4b216431fb801d3b216431fb801d2b216
441fb801d1b216461fb801d0b216461fb801cfb216461fb801ceb216461f
b801cdb216461fb801ccb216461fb801cbb216431fb801cab216231fb801
c9b216231fb801c8b216371fb801c7b216371fb801c6b216381fb801c5b2
16421fb801c4b216431fb801c3b216441fb801c2b216451fb801c1b21646
1fb801c0b216461fb801bfb216461fb801beb216461fb801bdb216461fb8
01bcb216461fb801bbb216461fb801bab216371fb801b9b216381fb801b8
b216421fb801b7b216431fb801b6b216431fb801b5b216431fb801b4b216
441fb801b3b216441fb801b2b216441fb801b1b216451fb801b0b216451f
b801afb216451fb801aeb216461fb801adb216461fb801acb216461fb801
abb216461fb801aab216461fb801a9b215341fb801a8b215411fb801a7b2
15411fb801a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b21552
1fb801a2b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8
019eb215521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8019a
b2154e1fb80199b2154e1fb80198b2154f1fb80197b2154f1fb80196b215
501fb80195b215521fb80194b215521fb80193b215521fb80192b215411f
b80191b2154f1fb80190b215501fb8018fb215501fb8018eb215511fb801
8db215521fb8018cb215521fb8018bb215521fb8018ab214581fb80189b2
14591fb80188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2145b
1fb80184b2145c1fb80183b214591fb80182b2145d1fb8018140af145d1f
f00f451fef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b
561fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b561f
aa0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b
561fa20b561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a681f
980a681f970a681f960a681f950a681f940a681f930a681f920a681f910a
681f9009681f8f09681f8e09681f8d09681f8c09681f410902fc02fa0056
001f02fb02fa0068001f017fb213321fb8017eb212371fb80174b212371f
b80173b211421fb80172b211421fb80171b211421fb80170b211421fb801
6fb211421fb8016eb211421fb8016db211421fb8016cb211421fb8016bb2
11421fb8016ab211421fb8013cb211421fb8013bb210421fb8013ab21042
1fb80139b210421fb80138b210421fb80137b210421fb80136b210421fb8
0135b210421fb80134b210421fb80133b210421fb80132b20f451fb80131
b20f451fb80130b20f451fb80112b20f451fb80111b20f451fb80110b20f
451fb8010fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e481f
b8010bb20e481fb8010ab20e481fb80109b20e481fb80108b20e481fb801
07b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea
0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e
1fd90b561fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba
0b561f9d0a681f9c0a681fb80180b213321fb8017ab211401fb80179b211
421fb80178b211421fb80177b211421fb80176b211421fb80175b211421f
b80143b211421fb80142b210421fb80141b210421fb80140b210421fb801
3fb210421fb8013eb210421fb8013db20f451fb80115b20f451fb80114b2
0f451fb80113b20f451fb903030302b2401fa4be030200b4030200c40302
00030300b213321fb8017bb213321fb80153b212371fb80152b211401fb8
0151b211401fb80150b211401fb8014fb211401fb8014eb211401fb8014d
b211401fb8014cb211401fb8014bb211401fb8014ab211401fb80149b211
401fb80148b211401fb80147b211401fb80146b211401fb80145b211401f
b80144b211401fb80122b211401fb80121b210421fb80120b210421fb801
1fb210421fb8011eb210421fb8011db210421fb8011cb210421fb8011bb2
10421fb8011ab210421fb80119b210421fb80118b20f451fb80117b20f45
1fb80116409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff8
0e481ff70e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a
1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd
0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e
1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb4
0b561fb30b561f9b0a681fb802fdb212371fb8017db212371fb8017cb212
371fb80169b2112e1fb80168b2112e1fb80167b211401fb80166b211401f
b80165b211401fb80164b211401fb80163b211401fb80162b211401fb801
61b211401fb80160b211401fb8015fb211401fb8015eb211401fb8015db2
11401fb8015cb211401fb8015bb211401fb8015ab211401fb80159b21140
1fb80158b211401fb80157b211401fb80156b211401fb80155b211401fb8
0154b211401fb8012fb211401fb8012eb210421fb8012db210421fb8012c
b210421fb8012bb210421fb8012ab210421fb80129b210421fb80128b210
421fb80127b210421fb80126b210421fb80125b20f451fb80124b20f451f
b80123b20f451fb80105b20f451fb80104b20f451fb80103b20f451fb801
02b20f451fb80101b20e481fb8010040a20e481fff0e481ffe0e481fe80c
4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1f
cf0c4e1fce0b561fb90b561f8503251f84032e1f83012e1f8248805581ab
80557f487d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d06
7c487a557bab7a55047a147a020a7948775578ab77550b77010c76487555
5475e475f4750314755475647574759475d475e47507a475b475c47503b8
ffc0401275383b46807590750214757475020075010fb8ffc04021750b0e
467448725573ab725504723472023bf47201e07201023072015072607202
b8ffc0b372242846b8ffc0403572161a461072307240720371486f5570ab
6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e48
6d55df6d0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef02fe
40ff016b032e1f6a03251f692e675568ab6755662e645565ab6455632e62
55612e60555f2e5d555eab5d555c2e5a555bab5a55592e58555703251f56
2e545555ab5455532e515552ab51554f2e4e554e03251f4d2e4b554cab4b
554a2e485549ab4855504801472e46554503361f001f01001e01001e701e
801ef01e040b601d701d02701de01df01d03701cf01c027f1b010f1a7f1a
8f1a030f1a8f1a020f1a8f1a020f191f198f199f19af19050f198f199f19
030c7012801202701180110230114011d011e011040011a011020f8f0f9f
0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e03
0f0eaf0ebf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d03
8f0d01400d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946ef0a
ff0a02400a242746ef09ff0902ff09010003012001010001100120010308
b8ffc0b301151f46b80100b316010501b80190b154532b2b4bb807ff524b
b008505bb00188b02553b00188b040515ab00688b000555a5b58b101018e
59b101024354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a0
1d594bb0805358b0401d594bb0ff5358b0001db1160042592b5e73757373
742b732b73742b2b73745e732b5e7374757374755e73747573015e737473
7475757473745e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b732b2b73755f75755e73
2b2b2b5e7373732b7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
5f5e00>
[9437 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 6526 884 <0001fff501d20404029f000f0011b200070bb901200004002fed012fcd31
30011406232122263534363321321e0204041519fc4e1a15151a03b20c12
0a060238372f2f37382f0a192700>QJJAAA+CALIBRI,Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>QJJAAA+CALIBRI,Bold AddT42Char 
QJJAAA+CALIBRI,Bold /CharStrings get begin
/endash 884 def
end
QJJAAA+CALIBRI,Bold /Encoding get
dup 150 /endash put
pop
end
%ADOEndSubsetFont
/XFUTXF+CALIBRI,Bold /QJJAAA+CALIBRI,Bold findfont ct_VMDictPut
/XFUTXF+CALIBRI,Bold*1 
[150{/.notdef}rp /endash 105{/.notdef}rp]
XFUTXF+CALIBRI,Bold nf
XFUTXF+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
150.13 130.903 mo
(\226)sh
XFUTXD+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
160.1 130.903 mo
( )sh
164.62 130.903 mo
(0)sh
174.75 130.903 mo
(.)sh
180.1 130.903 mo
(5)sh
190.23 130.903 mo
(,)sh
195.386 130.903 mo
( )sh
199.91 130.903 mo
(0)sh
210.05 130.903 mo
(\))sh
216.28 130.903 mo
(s)sh
349.1 83.81 mo
358.42 83.81 li
@
363.37 83.81 mo
356.83 87.08 li
357.86 85.02 357.86 82.6 356.83 80.54 cv
363.37 83.81 li
cp
ef
204.59 154.415 mo
344.72 154.415 li
@
349.67 154.415 mo
343.13 157.685 li
344.16 155.627 344.16 153.204 343.13 151.145 cv
349.67 154.415 li
cp
ef
141.31 154.462 mo
30.262 154.462 li
@
25.312 154.462 mo
31.852 151.192 li
30.823 153.251 30.823 155.674 31.852 157.732 cv
25.312 154.462 li
cp
ef
349.67 160.575 mo
349.67 148.303 li
@
26.209 148.303 mo
26.209 160.621 li
@
%ADOBeginSubsetFont: PBAAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+CALIBRI,Bold gcheck setglobal} if
1 6452 882 <0001003b018f0238025d000f0011b200070bb901210004002fed012fcd31
30011406232122263534363321321e0202381618fe601916161901a00c11
0c0501f73a2e2f39382e0a182800>PBAAAA+CALIBRI,Bold AddT42Char 
1 2234 47 <0001008dfffa019505140015002ab10102435558b900000294b5400a1052
055500183f3f012f1a4ded31301bb31052055500183f3f31305925140e02
23222e023511343e0233321e021501950d1e322726331e0d0d1f32262732
1e0d240a100a06060a100a04c60a100a06060a100a00>PBAAAA+CALIBRI,Bold AddT42Char 
1 2896 69 <0001008dfffa04b80512003d00b5b10102435558b6270f0a2e0f0f14b802
34b21e2e32b80234b4001e385229b8fff040120f26024c29282e220c100f
26024c0c0b060fb8017db7270a19225119552eb8017db240065400183f1a
4ded3f3f123939ed1139392b111239392b3f012fd4ed3210ed322f113311
3331301bb2385229b8fff040120f26024c29282e220c100f26024c0c0b06
0fb8017db7270a19225119552eb8017db240065400183f1a4ded3f3f1239
39ed1139392b111239392b3f31305925140e022323222e02270126262723
16161511140e0223222e02351134363333321e0217131e03173326263511
343e0233321e021504b8101b25137023332b2819febe1c3a170204040b1b
2e24232e1a0a37288d2634292413fc162b2826120103030c1c2e24222e19
0a5c1724180b0e253f32025d367d3b488f4cfd5b0a100b06060b100a048b
2f2f0d1e3527fe272b53535028469845025f0a100c05050c100a>PBAAAA+CALIBRI,Bold AddT42Char 
PBAAAA+CALIBRI,Bold /CharStrings get begin
/hyphen 882 def
/I 47 def
/N 69 def
end
PBAAAA+CALIBRI,Bold /Encoding get
dup 45 /hyphen put
dup 73 /I put
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XFUTXD+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two 2{/.notdef}rp /five 2{/.notdef}rp 
/eight /nine 7{/.notdef}rp /A /B /C /.notdef /E 
/F /.notdef /H /I 2{/.notdef}rp /L /M /N 
/O /P /.notdef /R /S /T 3{/.notdef}rp /X 
/Y 25{/.notdef}rp /s 140{/.notdef}rp]
XFUTXD+CALIBRI,Bold nf
XFUTXD+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
159.53 161.662 mo
(Y)sh
171.999 161.662 mo
( )sh
177.425 161.662 mo
(s)sh
53.545 91.251 mo
(I)sh
59.9434 91.251 mo
(N)sh
75.7517 91.251 mo
(I)sh
82.1502 91.251 mo
(T)sh
489.25 91.251 mo
(S)sh
500.594 91.251 mo
(T)sh
512.477 91.251 mo
(A)sh
527.019 91.251 mo
(B)sh
540.472 91.251 mo
(L)sh
550.621 91.251 mo
(E)sh
604.11 89.001 mo
(P)sh
616.883 89.001 mo
(R)sh
630.395 89.001 mo
(O)sh
646.625 89.001 mo
(M)sh
667.602 89.001 mo
(O)sh
683.832 89.001 mo
(T)sh
695.715 89.001 mo
(E)sh
389.71 90.773 mo
(I)sh
396.108 90.773 mo
(N)sh
411.917 90.773 mo
(I)sh
418.315 90.773 mo
(T)sh
XFUTXD+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
487.64 130.312 mo
(\()sh
493.87 130.312 mo
(X)sh
504.89 130.312 mo
(-)sh
511.01 130.312 mo
(1)sh
521.15 130.312 mo
(.)sh
526.49 130.312 mo
(5)sh
536.63 130.312 mo
(,)sh
541.78 130.312 mo
(0)sh
551.92 130.312 mo
(\))sh
558.15 130.312 mo
(S)sh
155.26 112.312 mo
(M)sh
172.741 112.312 mo
(A)sh
184.86 112.312 mo
(X)sh
XFUTXD+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
271.48 71 mo
(P)sh
284.254 71 mo
(C)sh
296.957 71 mo
(H)sh
152.23 70.76 mo
(P)sh
165.004 70.76 mo
(C)sh
177.706 70.76 mo
(H)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XFUTXF+CALIBRI,Bold*1 uf
/XFUTXF+CALIBRI,Bold uf
/QJJAAA+CALIBRI,Bold uf
/XFUTXE+CALIBRI,BoldItalic*1 uf
/XFUTXE+CALIBRI,BoldItalic uf
/HIBBAA+CALIBRI,BoldItalic uf
/XFUTXD+CALIBRI,Bold*1 uf
/XFUTXD+CALIBRI,Bold uf
/PBAAAA+CALIBRI,Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
